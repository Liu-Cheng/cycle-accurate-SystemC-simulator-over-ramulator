!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACT	ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::ALDRAM::Command
ACT	DDR3.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR3::Command
ACT	DDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR4::Command
ACT	DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::DSARP::Command
ACT	GDDR5.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::GDDR5::Command
ACT	HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:ramulator::HBM::Command
ACT	LPDDR3.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::LPDDR3::Command
ACT	LPDDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::LPDDR4::Command
ACT	SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
ACT	TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::TLDRAM::Command
ACT	WideIO.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::WideIO::Command
ACT	WideIO2.h	/^        ACT, PRE,   PRA, $/;"	m	class:ramulator::WideIO2::Command
ACTF	TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:ramulator::TLDRAM::Command
ACTM	TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:ramulator::TLDRAM::Command
ALDRAM	ALDRAM.cpp	/^ALDRAM::ALDRAM(Org org, Speed speed) :$/;"	f	class:ALDRAM
ALDRAM	ALDRAM.cpp	/^ALDRAM::ALDRAM(const string& org_str, const string& speed_str) :$/;"	f	class:ALDRAM
ALDRAM	ALDRAM.h	/^class ALDRAM$/;"	c	namespace:ramulator
ALDRAM_1066E	ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1066F	ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1066G	ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1333G	ALDRAM.h	/^        ALDRAM_1333G, ALDRAM_1333H,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1333H	ALDRAM.h	/^        ALDRAM_1333G, ALDRAM_1333H,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1600H	ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1600J	ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1600K	ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1866K	ALDRAM.h	/^        ALDRAM_1866K, ALDRAM_1866L,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1866L	ALDRAM.h	/^        ALDRAM_1866K, ALDRAM_1866L,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_1Gb_x16	ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_1Gb_x4	ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_1Gb_x8	ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_2133L	ALDRAM.h	/^        ALDRAM_2133L, ALDRAM_2133M,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_2133M	ALDRAM.h	/^        ALDRAM_2133L, ALDRAM_2133M,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_2Gb_x16	ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_2Gb_x4	ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_2Gb_x8	ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_4Gb_x16	ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_4Gb_x4	ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_4Gb_x8	ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_512Mb_x16	ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_512Mb_x4	ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_512Mb_x8	ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_800D	ALDRAM.h	/^        ALDRAM_800D,  ALDRAM_800E,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_800E	ALDRAM.h	/^        ALDRAM_800D,  ALDRAM_800E,$/;"	m	class:ramulator::ALDRAM::Speed
ALDRAM_8Gb_x16	ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_8Gb_x4	ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ALDRAM_8Gb_x8	ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ramulator::ALDRAM::Org
ActPowerDown	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
ActPowerDown	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
ActPowerDown	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
ActPowerDown	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
ActPowerDown	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
ActPowerDown	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
ActPowerDown	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
ActPowerDown	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
ActPowerDown	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
ActPowerDown	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
ActPowerDown	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
ActPowerDown	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
Average	StatType.h	/^  Average():current(0), lastReset(0), total_val(0), last(0){}$/;"	f	class:Stats::Average
Average	StatType.h	/^class Average: public ScalarBase<Average> {$/;"	c	namespace:Stats
AverageDeviation	StatType.h	/^  AverageDeviation():sum(Counter()), squares(Counter()) {}$/;"	f	class:Stats::AverageDeviation
AverageDeviation	StatType.h	/^class AverageDeviation: public Stat<AverageDeviation> {$/;"	c	namespace:Stats
AverageDeviationStat	Statistics.h	/^class AverageDeviationStat : public DistStatBase<Stats::AverageDeviation> {$/;"	c	namespace:ramulator
AverageStat	Statistics.h	/^class AverageStat : public ScalarStatBase<Stats::Average> {$/;"	c	namespace:ramulator
AverageVector	StatType.h	/^class AverageVector: public VectorBase<AverageVector, Average> {$/;"	c	namespace:Stats
AverageVectorStat	Statistics.h	/^class AverageVectorStat : public VectorStatBase<Stats::AverageVector, Stats::Average> {$/;"	c	namespace:ramulator
Bank	ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::ALDRAM::Level
Bank	DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR3::Level
Bank	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
Bank	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
Bank	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
Bank	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
Bank	LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR3::Level
Bank	LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR4::Level
Bank	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
Bank	TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::TLDRAM::Level
Bank	WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO::Level
Bank	WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO2::Level
BankGroup	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
BankGroup	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
BankGroup	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
BurstOp	common.cpp	/^BurstOp::BurstOp($/;"	f	class:BurstOp
BurstOp	common.cpp	/^BurstOp::BurstOp(bool _valid){$/;"	f	class:BurstOp
BurstOp	common.h	/^struct BurstOp{$/;"	s
COLD	ALDRAM.h	/^        COLD, HOT, MAX$/;"	m	class:ramulator::ALDRAM::Temp
Cache	Cache.cpp	/^Cache::Cache(int size, int assoc, int block_size,$/;"	f	class:ramulator::Cache
Cache	Cache.h	/^class Cache {$/;"	c	namespace:ramulator
CacheSystem	Cache.h	/^  CacheSystem(const Config& configs, std::function<bool(Request)> send_memory):$/;"	f	class:ramulator::CacheSystem
CacheSystem	Cache.h	/^class CacheSystem {$/;"	c	namespace:ramulator
ChRaBaRoCo	Memory.h	/^        ChRaBaRoCo,$/;"	m	class:ramulator::Memory::Type
Channel	ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::ALDRAM::Level
Channel	DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR3::Level
Channel	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
Channel	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
Channel	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
Channel	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
Channel	LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR3::Level
Channel	LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR4::Level
Channel	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
Channel	TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::TLDRAM::Level
Channel	WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO::Level
Channel	WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO2::Level
Closed	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
Closed	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
Closed	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
Closed	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
Closed	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
Closed	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
Closed	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
Closed	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
Closed	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
Closed	Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:ramulator::RowPolicy::Type
Closed	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
Closed	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
Closed	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
Column	ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::ALDRAM::Level
Column	DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR3::Level
Column	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
Column	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
Column	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
Column	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
Column	LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR3::Level
Column	LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR4::Level
Column	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
Column	TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::TLDRAM::Level
Column	WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO::Level
Column	WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO2::Level
Command	ALDRAM.h	/^    enum class Command : int$/;"	c	class:ramulator::ALDRAM
Command	DDR3.h	/^    enum class Command : int$/;"	c	class:ramulator::DDR3
Command	DDR4.h	/^    enum class Command : int$/;"	c	class:ramulator::DDR4
Command	DSARP.h	/^    enum class Command : int$/;"	c	class:ramulator::DSARP
Command	GDDR5.h	/^    enum class Command : int$/;"	c	class:ramulator::GDDR5
Command	HBM.h	/^    enum class Command : int$/;"	c	class:ramulator::HBM
Command	LPDDR3.h	/^    enum class Command : int$/;"	c	class:ramulator::LPDDR3
Command	LPDDR4.h	/^    enum class Command : int$/;"	c	class:ramulator::LPDDR4
Command	SALP.h	/^    enum class Command : int$/;"	c	class:ramulator::SALP
Command	TLDRAM.h	/^    enum class Command : int$/;"	c	class:ramulator::TLDRAM
Command	WideIO.h	/^    enum class Command : int$/;"	c	class:ramulator::WideIO
Command	WideIO2.h	/^    enum class Command : int$/;"	c	class:ramulator::WideIO2
Config	Config.cpp	/^Config::Config(const std::string& fname) {$/;"	f	class:Config
Config	Config.h	/^    Config() {}$/;"	f	class:ramulator::Config
Config	Config.h	/^class Config {$/;"	c	namespace:ramulator
ConstValue	StatType.h	/^  ConstValue(Counter __value):_value(__value){}$/;"	f	class:Stats::ConstValue
ConstValue	StatType.h	/^class ConstValue: public ScalarBase<ConstValue> {$/;"	c	namespace:Stats
Controller	Controller.h	/^    Controller(const Config& configs, DRAM<T>* channel) :$/;"	f	class:ramulator::Controller
Controller	Controller.h	/^class Controller$/;"	c	namespace:ramulator
Core	Processor.cpp	/^Core::Core(const Config& configs, int coreid,$/;"	f	class:Core
Core	Processor.h	/^class Core {$/;"	c	namespace:ramulator
Counter	StatType.h	/^typedef double Counter;$/;"	t	namespace:Stats
CounterLimits	StatType.h	/^typedef std::numeric_limits<Counter> CounterLimits;$/;"	t	namespace:Stats
DARP	DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:ramulator::DSARP::Type
DDR3	DDR3.cpp	/^DDR3::DDR3(Org org, Speed speed) :$/;"	f	class:DDR3
DDR3	DDR3.cpp	/^DDR3::DDR3(const string& org_str, const string& speed_str) :$/;"	f	class:DDR3
DDR3	DDR3.h	/^class DDR3$/;"	c	namespace:ramulator
DDR3_1066E	DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1066F	DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1066G	DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1333G	DDR3.h	/^        DDR3_1333G, DDR3_1333H,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1333H	DDR3.h	/^        DDR3_1333G, DDR3_1333H,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1600H	DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1600J	DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1600K	DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1866K	DDR3.h	/^        DDR3_1866K, DDR3_1866L,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1866L	DDR3.h	/^        DDR3_1866K, DDR3_1866L,$/;"	m	class:ramulator::DDR3::Speed
DDR3_1Gb_x16	DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_1Gb_x4	DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_1Gb_x8	DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_2133L	DDR3.h	/^        DDR3_2133L, DDR3_2133M,$/;"	m	class:ramulator::DDR3::Speed
DDR3_2133M	DDR3.h	/^        DDR3_2133L, DDR3_2133M,$/;"	m	class:ramulator::DDR3::Speed
DDR3_2Gb_x16	DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_2Gb_x4	DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_2Gb_x8	DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_4Gb_x16	DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_4Gb_x4	DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_4Gb_x8	DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_512Mb_x16	DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_512Mb_x4	DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_512Mb_x8	DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_800D	DDR3.h	/^        DDR3_800D,  DDR3_800E,$/;"	m	class:ramulator::DDR3::Speed
DDR3_800E	DDR3.h	/^        DDR3_800D,  DDR3_800E,$/;"	m	class:ramulator::DDR3::Speed
DDR3_8Gb_x16	DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_8Gb_x4	DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR3_8Gb_x8	DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:ramulator::DDR3::Org
DDR4	DDR4.cpp	/^DDR4::DDR4(Org org, Speed speed)$/;"	f	class:DDR4
DDR4	DDR4.cpp	/^DDR4::DDR4(const string& org_str, const string& speed_str) :$/;"	f	class:DDR4
DDR4	DDR4.h	/^class DDR4$/;"	c	namespace:ramulator
DDR4_1600K	DDR4.h	/^        DDR4_1600K, DDR4_1600L,$/;"	m	class:ramulator::DDR4::Speed
DDR4_1600L	DDR4.h	/^        DDR4_1600K, DDR4_1600L,$/;"	m	class:ramulator::DDR4::Speed
DDR4_1866M	DDR4.h	/^        DDR4_1866M, DDR4_1866N,$/;"	m	class:ramulator::DDR4::Speed
DDR4_1866N	DDR4.h	/^        DDR4_1866M, DDR4_1866N,$/;"	m	class:ramulator::DDR4::Speed
DDR4_2133P	DDR4.h	/^        DDR4_2133P, DDR4_2133R,$/;"	m	class:ramulator::DDR4::Speed
DDR4_2133R	DDR4.h	/^        DDR4_2133P, DDR4_2133R,$/;"	m	class:ramulator::DDR4::Speed
DDR4_2400R	DDR4.h	/^        DDR4_2400R, DDR4_2400U,$/;"	m	class:ramulator::DDR4::Speed
DDR4_2400U	DDR4.h	/^        DDR4_2400R, DDR4_2400U,$/;"	m	class:ramulator::DDR4::Speed
DDR4_2Gb_x16	DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_2Gb_x4	DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_2Gb_x8	DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_4Gb_x16	DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_4Gb_x4	DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_4Gb_x8	DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_8Gb_x16	DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_8Gb_x4	DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DDR4_8Gb_x8	DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:ramulator::DDR4::Org
DRAM	DRAM.h	/^    DRAM(){}$/;"	f	class:ramulator::DRAM
DRAM	DRAM.h	/^DRAM<T>::DRAM(T* spec, typename T::Level level) :$/;"	f	class:ramulator::DRAM
DRAM	DRAM.h	/^class DRAM$/;"	c	namespace:ramulator
DSARP	DSARP.cpp	/^DSARP::DSARP(Org org, Speed speed, Type type, int n_sa) :$/;"	f	class:DSARP
DSARP	DSARP.cpp	/^DSARP::DSARP(const string& org_str, const string& speed_str, Type type, int n_sa) :$/;"	f	class:DSARP
DSARP	DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:ramulator::DSARP::Type
DSARP	DSARP.h	/^class DSARP$/;"	c	namespace:ramulator
DSARP_1333	DSARP.h	/^        DSARP_1333,$/;"	m	class:ramulator::DSARP::Speed
DSARP_16Gb_x8	DSARP.h	/^        DSARP_16Gb_x8,$/;"	m	class:ramulator::DSARP::Org
DSARP_32Gb_x8	DSARP.h	/^        DSARP_32Gb_x8,$/;"	m	class:ramulator::DSARP::Org
DSARP_8Gb_x8	DSARP.h	/^        DSARP_8Gb_x8,$/;"	m	class:ramulator::DSARP::Org
DSARP_H_	DSARP.h	36;"	d
DistStatBase	Statistics.h	/^class DistStatBase : public StatBase<StatType> { \/\/ wrapper for Stats::DistBase$/;"	c	namespace:ramulator
Distribution	StatType.h	/^  Distribution():param_min(Counter()), param_max(Counter()),$/;"	f	class:Stats::Distribution
Distribution	StatType.h	/^class Distribution: public Stat<Distribution> {$/;"	c	namespace:Stats
DistributionStat	Statistics.h	/^class DistributionStat : public DistStatBase<Stats::Distribution> {$/;"	c	namespace:ramulator
EXPAND_CIAI_READ	User.h	/^    EXPAND_CIAI_READ,$/;"	e	enum:PortType
EXPAND_CIAO_READ	User.h	/^    EXPAND_CIAO_READ,$/;"	e	enum:PortType
EXPAND_DEPTH_READ	User.h	/^    EXPAND_DEPTH_READ,$/;"	e	enum:PortType
EXPAND_DEPTH_WRITE	User.h	/^    EXPAND_DEPTH_WRITE,$/;"	e	enum:PortType
EXPAND_RPAI_READ	User.h	/^    EXPAND_RPAI_READ,$/;"	e	enum:PortType
EXPAND_RPAO_READ	User.h	/^    EXPAND_RPAO_READ,$/;"	e	enum:PortType
EXTENSION	Request.h	/^                EXTENSION,$/;"	m	class:ramulator::Request::Type
Entry	Scheduler.h	/^    struct Entry {$/;"	s	class:ramulator::RowTable
FCFS	Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:ramulator::Scheduler::Type
FRFCFS	Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:ramulator::Scheduler::Type
FRFCFS_Cap	Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:ramulator::Scheduler::Type
FRFCFS_PriorHit	Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:ramulator::Scheduler::Type
Flags	StatType.h	/^  Flags(){}$/;"	f	class:Stats::Flags
Flags	StatType.h	/^  Flags(uint16_t flags):flags(flags){}$/;"	f	class:Stats::Flags
Flags	StatType.h	/^class Flags {$/;"	c	namespace:Stats
GDDR5	GDDR5.cpp	/^GDDR5::GDDR5(Org org, Speed speed) : $/;"	f	class:GDDR5
GDDR5	GDDR5.cpp	/^GDDR5::GDDR5(const string& org_str, const string& speed_str) :$/;"	f	class:GDDR5
GDDR5	GDDR5.h	/^class GDDR5$/;"	c	namespace:ramulator
GDDR5_1Gb_x16	GDDR5.h	/^        GDDR5_1Gb_x16,   GDDR5_1Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_1Gb_x32	GDDR5.h	/^        GDDR5_1Gb_x16,   GDDR5_1Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_2Gb_x16	GDDR5.h	/^        GDDR5_2Gb_x16,   GDDR5_2Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_2Gb_x32	GDDR5.h	/^        GDDR5_2Gb_x16,   GDDR5_2Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_4000	GDDR5.h	/^        GDDR5_4000, GDDR5_4500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_4500	GDDR5.h	/^        GDDR5_4000, GDDR5_4500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_4Gb_x16	GDDR5.h	/^        GDDR5_4Gb_x16,   GDDR5_4Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_4Gb_x32	GDDR5.h	/^        GDDR5_4Gb_x16,   GDDR5_4Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_5000	GDDR5.h	/^        GDDR5_5000, GDDR5_5500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_512Mb_x16	GDDR5.h	/^        GDDR5_512Mb_x16, GDDR5_512Mb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_512Mb_x32	GDDR5.h	/^        GDDR5_512Mb_x16, GDDR5_512Mb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_5500	GDDR5.h	/^        GDDR5_5000, GDDR5_5500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_6000	GDDR5.h	/^        GDDR5_6000, GDDR5_6500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_6500	GDDR5.h	/^        GDDR5_6000, GDDR5_6500,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_7000	GDDR5.h	/^        GDDR5_7000,$/;"	m	class:ramulator::GDDR5::Speed
GDDR5_8Gb_x16	GDDR5.h	/^        GDDR5_8Gb_x16,   GDDR5_8Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GDDR5_8Gb_x32	GDDR5.h	/^        GDDR5_8Gb_x16,   GDDR5_8Gb_x32,$/;"	m	class:ramulator::GDDR5::Org
GL	common.h	/^class GL{$/;"	c
Gem5Wrapper	Gem5Wrapper.cpp	/^Gem5Wrapper::Gem5Wrapper(const Config& configs, int cacheline)$/;"	f	class:Gem5Wrapper
Gem5Wrapper	Gem5Wrapper.h	/^class Gem5Wrapper $/;"	c	namespace:ramulator
Graph	graph.cpp	/^Graph::Graph(const std::string& fname){$/;"	f	class:Graph
Graph	graph.h	/^class Graph{$/;"	c
HBM	HBM.cpp	/^HBM::HBM(Org org, Speed speed)$/;"	f	class:HBM
HBM	HBM.cpp	/^HBM::HBM(const string& org_str, const string& speed_str) :$/;"	f	class:HBM
HBM	HBM.h	/^class HBM$/;"	c	namespace:ramulator
HBM_1Gb	HBM.h	/^        HBM_1Gb,$/;"	m	class:ramulator::HBM::Org
HBM_1Gbps	HBM.h	/^        HBM_1Gbps,$/;"	m	class:ramulator::HBM::Speed
HBM_2Gb	HBM.h	/^        HBM_2Gb,$/;"	m	class:ramulator::HBM::Org
HBM_4Gb	HBM.h	/^        HBM_4Gb,$/;"	m	class:ramulator::HBM::Org
HERE	common.h	13;"	d
HOT	ALDRAM.h	/^        COLD, HOT, MAX$/;"	m	class:ramulator::ALDRAM::Temp
Histogram	StatType.h	/^  Histogram():param_buckets(0) { reset(); }$/;"	f	class:Stats::Histogram
Histogram	StatType.h	/^  Histogram(size_type __buckets):cvec(__buckets) {$/;"	f	class:Stats::Histogram
Histogram	StatType.h	/^class Histogram: public Stat<Histogram> {$/;"	c	namespace:Stats
HistogramStat	Statistics.h	/^class HistogramStat : public DistStatBase<Stats::Histogram> {$/;"	c	namespace:ramulator
INSPECT_DEPTH_READ	User.h	/^    INSPECT_DEPTH_READ = 0,$/;"	e	enum:PortType
INTEGRATED_WITH_GEM5	Statistics.h	8;"	d
L1	Cache.h	/^    L1,$/;"	m	class:ramulator::Cache::Level
L2	Cache.h	/^    L2,$/;"	m	class:ramulator::Cache::Level
L3	Cache.h	/^    L3,$/;"	m	class:ramulator::Cache::Level
LPDDR3	LPDDR3.cpp	/^LPDDR3::LPDDR3(Org org, Speed speed)$/;"	f	class:LPDDR3
LPDDR3	LPDDR3.cpp	/^LPDDR3::LPDDR3(const string& org_str, const string& speed_str) :$/;"	f	class:LPDDR3
LPDDR3	LPDDR3.h	/^class LPDDR3$/;"	c	namespace:ramulator
LPDDR3_12Gb_x16	LPDDR3.h	/^        LPDDR3_12Gb_x16, LPDDR3_12Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_12Gb_x32	LPDDR3.h	/^        LPDDR3_12Gb_x16, LPDDR3_12Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_1333	LPDDR3.h	/^        LPDDR3_1333,$/;"	m	class:ramulator::LPDDR3::Speed
LPDDR3_1600	LPDDR3.h	/^        LPDDR3_1600,$/;"	m	class:ramulator::LPDDR3::Speed
LPDDR3_16Gb_x16	LPDDR3.h	/^        LPDDR3_16Gb_x16, LPDDR3_16Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_16Gb_x32	LPDDR3.h	/^        LPDDR3_16Gb_x16, LPDDR3_16Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_1866	LPDDR3.h	/^        LPDDR3_1866,$/;"	m	class:ramulator::LPDDR3::Speed
LPDDR3_2133	LPDDR3.h	/^        LPDDR3_2133,$/;"	m	class:ramulator::LPDDR3::Speed
LPDDR3_4Gb_x16	LPDDR3.h	/^        LPDDR3_4Gb_x16, LPDDR3_4Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_4Gb_x32	LPDDR3.h	/^        LPDDR3_4Gb_x16, LPDDR3_4Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_6Gb_x16	LPDDR3.h	/^        LPDDR3_6Gb_x16, LPDDR3_6Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_6Gb_x32	LPDDR3.h	/^        LPDDR3_6Gb_x16, LPDDR3_6Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_8Gb_x16	LPDDR3.h	/^        LPDDR3_8Gb_x16, LPDDR3_8Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR3_8Gb_x32	LPDDR3.h	/^        LPDDR3_8Gb_x16, LPDDR3_8Gb_x32,$/;"	m	class:ramulator::LPDDR3::Org
LPDDR4	LPDDR4.cpp	/^LPDDR4::LPDDR4(Org org, Speed speed)$/;"	f	class:LPDDR4
LPDDR4	LPDDR4.cpp	/^LPDDR4::LPDDR4(const string& org_str, const string& speed_str) :$/;"	f	class:LPDDR4
LPDDR4	LPDDR4.h	/^class LPDDR4$/;"	c	namespace:ramulator
LPDDR4_1600	LPDDR4.h	/^        LPDDR4_1600,$/;"	m	class:ramulator::LPDDR4::Speed
LPDDR4_2400	LPDDR4.h	/^        LPDDR4_2400,$/;"	m	class:ramulator::LPDDR4::Speed
LPDDR4_3200	LPDDR4.h	/^        LPDDR4_3200,$/;"	m	class:ramulator::LPDDR4::Speed
LPDDR4_4Gb_x16	LPDDR4.h	/^        LPDDR4_4Gb_x16,$/;"	m	class:ramulator::LPDDR4::Org
LPDDR4_6Gb_x16	LPDDR4.h	/^        LPDDR4_6Gb_x16,$/;"	m	class:ramulator::LPDDR4::Org
LPDDR4_8Gb_x16	LPDDR4.h	/^        LPDDR4_8Gb_x16,$/;"	m	class:ramulator::LPDDR4::Org
Level	ALDRAM.h	/^    enum class Level : int$/;"	c	class:ramulator::ALDRAM
Level	Cache.h	/^  enum class Level {$/;"	c	class:ramulator::Cache
Level	DDR3.h	/^    enum class Level : int$/;"	c	class:ramulator::DDR3
Level	DDR4.h	/^    enum class Level : int$/;"	c	class:ramulator::DDR4
Level	DSARP.h	/^    enum class Level : int$/;"	c	class:ramulator::DSARP
Level	GDDR5.h	/^    enum class Level : int$/;"	c	class:ramulator::GDDR5
Level	HBM.h	/^    enum class Level : int$/;"	c	class:ramulator::HBM
Level	LPDDR3.h	/^    enum class Level : int$/;"	c	class:ramulator::LPDDR3
Level	LPDDR4.h	/^    enum class Level : int$/;"	c	class:ramulator::LPDDR4
Level	SALP.h	/^    enum class Level : int$/;"	c	class:ramulator::SALP
Level	TLDRAM.h	/^    enum class Level : int$/;"	c	class:ramulator::TLDRAM
Level	WideIO.h	/^    enum class Level : int$/;"	c	class:ramulator::WideIO
Level	WideIO2.h	/^    enum class Level : int$/;"	c	class:ramulator::WideIO2
Line	Cache.h	/^    Line(long addr, long tag):$/;"	f	struct:ramulator::Cache::Line
Line	Cache.h	/^    Line(long addr, long tag, bool lock, bool dirty):$/;"	f	struct:ramulator::Cache::Line
Line	Cache.h	/^  struct Line {$/;"	s	class:ramulator::Cache
MASA	SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:ramulator::SALP::Type
MAX	Memory.h	/^        MAX,$/;"	m	class:ramulator::Memory::Type
MAX	Memory.h	/^      MAX,$/;"	m	class:ramulator::Memory::Translation
MIG	TLDRAM.h	/^        MIG,$/;"	m	class:ramulator::TLDRAM::Command
MemWrapper	MemWrapper.cpp	/^MemWrapper::MemWrapper(sc_module_name _name,$/;"	f	class:MemWrapper
MemWrapper	MemWrapper.h	/^class MemWrapper : public sc_module{$/;"	c
Memory	Memory.h	/^    Memory(const Config& configs, vector<Controller<T>*> ctrls)$/;"	f	class:ramulator::Memory
Memory	Memory.h	/^class Memory : public MemoryBase$/;"	c	namespace:ramulator
MemoryBase	Memory.h	/^    MemoryBase() {}$/;"	f	class:ramulator::MemoryBase
MemoryBase	Memory.h	/^class MemoryBase{$/;"	c	namespace:ramulator
MemoryFactory	MemoryFactory.h	/^class MemoryFactory {$/;"	c	namespace:ramulator
None	Memory.h	/^      None,$/;"	m	class:ramulator::Memory::Translation
Op	StatType.h	/^  Op() {}$/;"	f	class:Stats::Op
Op	StatType.h	/^  Op(std::string __opstring):opstring(__opstring){}$/;"	f	class:Stats::Op
Op	StatType.h	/^class Op {$/;"	c	namespace:Stats
Opened	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
Opened	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
Opened	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
Opened	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
Opened	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
Opened	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
Opened	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
Opened	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
Opened	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
Opened	Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:ramulator::RowPolicy::Type
Opened	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
Opened	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
Opened	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
Org	ALDRAM.h	/^    enum class Org : int$/;"	c	class:ramulator::ALDRAM
Org	DDR3.h	/^    enum class Org : int$/;"	c	class:ramulator::DDR3
Org	DDR4.h	/^    enum class Org : int$/;"	c	class:ramulator::DDR4
Org	DSARP.h	/^    enum class Org : int$/;"	c	class:ramulator::DSARP
Org	GDDR5.h	/^    enum class Org : int$/;"	c	class:ramulator::GDDR5
Org	HBM.h	/^    enum class Org : int$/;"	c	class:ramulator::HBM
Org	LPDDR3.h	/^    enum class Org : int$/;"	c	class:ramulator::LPDDR3
Org	LPDDR4.h	/^    enum class Org : int$/;"	c	class:ramulator::LPDDR4
Org	SALP.h	/^    enum class Org : int$/;"	c	class:ramulator::SALP
Org	TLDRAM.h	/^    enum class Org : int$/;"	c	class:ramulator::TLDRAM
Org	WideIO.h	/^    enum class Org : int$/;"	c	class:ramulator::WideIO
Org	WideIO2.h	/^    enum class Org : int$/;"	c	class:ramulator::WideIO2
OrgEntry	ALDRAM.h	/^    struct OrgEntry {$/;"	s	class:ramulator::ALDRAM
OrgEntry	DDR3.h	/^    struct OrgEntry {$/;"	s	class:ramulator::DDR3
OrgEntry	DDR4.h	/^    struct OrgEntry {$/;"	s	class:ramulator::DDR4
OrgEntry	DSARP.h	/^    struct OrgEntry {$/;"	s	class:ramulator::DSARP
OrgEntry	GDDR5.h	/^    struct OrgEntry {$/;"	s	class:ramulator::GDDR5
OrgEntry	HBM.h	/^    struct OrgEntry {$/;"	s	class:ramulator::HBM
OrgEntry	LPDDR3.h	/^    struct OrgEntry {$/;"	s	class:ramulator::LPDDR3
OrgEntry	LPDDR4.h	/^    struct OrgEntry {$/;"	s	class:ramulator::LPDDR4
OrgEntry	SALP.h	/^    struct OrgEntry {$/;"	s	class:ramulator::SALP
OrgEntry	TLDRAM.h	/^    struct OrgEntry {$/;"	s	class:ramulator::TLDRAM
OrgEntry	WideIO.h	/^    struct OrgEntry {$/;"	s	class:ramulator::WideIO
OrgEntry	WideIO2.h	/^    struct OrgEntry {$/;"	s	class:ramulator::WideIO2
PD	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
PD	WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO::Command
PD	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
PDE	ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::ALDRAM::Command
PDE	DDR3.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR3::Command
PDE	DDR4.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR4::Command
PDE	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
PDE	GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::GDDR5::Command
PDE	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
PDE	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
PDE	SALP.h	/^        REF, PDE,   PDX, SRE, SRX, $/;"	m	class:ramulator::SALP::Command
PDE	TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::TLDRAM::Command
PDX	ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::ALDRAM::Command
PDX	DDR3.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR3::Command
PDX	DDR4.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR4::Command
PDX	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
PDX	GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::GDDR5::Command
PDX	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
PDX	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
PDX	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
PDX	SALP.h	/^        REF, PDE,   PDX, SRE, SRX, $/;"	m	class:ramulator::SALP::Command
PDX	TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::TLDRAM::Command
PDX	WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO::Command
PDX	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
POWERDOWN	Request.h	/^                POWERDOWN,$/;"	m	class:ramulator::Request::Type
PRA	LPDDR3.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::LPDDR3::Command
PRA	WideIO.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::WideIO::Command
PRA	WideIO2.h	/^        ACT, PRE,   PRA, $/;"	m	class:ramulator::WideIO2::Command
PRE	ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::ALDRAM::Command
PRE	DDR3.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR3::Command
PRE	DDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR4::Command
PRE	DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::DSARP::Command
PRE	GDDR5.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::GDDR5::Command
PRE	HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:ramulator::HBM::Command
PRE	LPDDR3.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::LPDDR3::Command
PRE	LPDDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::LPDDR4::Command
PRE	SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
PRE	TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::TLDRAM::Command
PRE	WideIO.h	/^        ACT, PRE, PRA, $/;"	m	class:ramulator::WideIO::Command
PRE	WideIO2.h	/^        ACT, PRE,   PRA, $/;"	m	class:ramulator::WideIO2::Command
PREA	ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::ALDRAM::Command
PREA	DDR3.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR3::Command
PREA	DDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::DDR4::Command
PREA	DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::DSARP::Command
PREA	GDDR5.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::GDDR5::Command
PREA	HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:ramulator::HBM::Command
PREA	LPDDR4.h	/^        ACT, PRE, PREA, $/;"	m	class:ramulator::LPDDR4::Command
PREA	TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ramulator::TLDRAM::Command
PREAF	TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:ramulator::TLDRAM::Command
PREAM	TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:ramulator::TLDRAM::Command
PREF	TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:ramulator::TLDRAM::Command
PREM	TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:ramulator::TLDRAM::Command
PRER	SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
PRE_OTHER	SALP.h	/^        PRE_OTHER,$/;"	m	class:ramulator::SALP::Command
PortType	User.h	/^enum PortType{$/;"	g
PowerUp	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
PowerUp	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
PowerUp	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
PowerUp	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
PowerUp	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
PowerUp	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
PowerUp	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
PowerUp	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
PowerUp	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
PowerUp	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
PowerUp	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
PowerUp	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
PrePowerDown	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
PrePowerDown	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
PrePowerDown	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
PrePowerDown	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
PrePowerDown	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
PrePowerDown	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
PrePowerDown	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
PrePowerDown	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
PrePowerDown	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
PrePowerDown	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
PrePowerDown	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
PrePowerDown	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
Processor	Processor.cpp	/^Processor::Processor(const Config& configs,$/;"	f	class:Processor
Processor	Processor.h	/^class Processor {$/;"	c	namespace:ramulator
Queue	Controller.h	/^    struct Queue {$/;"	s	class:ramulator::Controller
RD	ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::ALDRAM::Command
RD	DDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR3::Command
RD	DDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR4::Command
RD	DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::DSARP::Command
RD	GDDR5.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::GDDR5::Command
RD	HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:ramulator::HBM::Command
RD	LPDDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR3::Command
RD	LPDDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR4::Command
RD	SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
RD	TLDRAM.h	/^        RD, WR,$/;"	m	class:ramulator::TLDRAM::Command
RD	WideIO.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::WideIO::Command
RD	WideIO2.h	/^        RD,  WR,    RDA,  WRA, $/;"	m	class:ramulator::WideIO2::Command
RDA	ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::ALDRAM::Command
RDA	DDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR3::Command
RDA	DDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR4::Command
RDA	DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::DSARP::Command
RDA	GDDR5.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::GDDR5::Command
RDA	HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:ramulator::HBM::Command
RDA	LPDDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR3::Command
RDA	LPDDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR4::Command
RDA	SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
RDA	WideIO.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::WideIO::Command
RDA	WideIO2.h	/^        RD,  WR,    RDA,  WRA, $/;"	m	class:ramulator::WideIO2::Command
READ	Request.h	/^                READ,$/;"	m	class:ramulator::Request::Type
REF	ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::ALDRAM::Command
REF	DDR3.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR3::Command
REF	DDR4.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR4::Command
REF	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
REF	GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::GDDR5::Command
REF	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
REF	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
REF	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
REF	SALP.h	/^        REF, PDE,   PDX, SRE, SRX, $/;"	m	class:ramulator::SALP::Command
REF	TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::TLDRAM::Command
REF	WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO::Command
REF	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
REFAB	DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:ramulator::DSARP::Type
REFPB	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
REFPB	DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:ramulator::DSARP::Type
REFPB	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
REFPB	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
REFPB	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
REFRESH	Request.h	/^                REFRESH,$/;"	m	class:ramulator::Request::Type
REFSB	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
Random	Memory.h	/^      Random,$/;"	m	class:ramulator::Memory::Translation
Rank	ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::ALDRAM::Level
Rank	DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR3::Level
Rank	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
Rank	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
Rank	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
Rank	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
Rank	LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR3::Level
Rank	LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR4::Level
Rank	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
Rank	TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::TLDRAM::Level
Rank	WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO::Level
Rank	WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO2::Level
Refresh	Refresh.cpp	/^Refresh<DSARP>::Refresh(Controller<DSARP>* ctrl) : ctrl(ctrl) {$/;"	f	class:ramulator::Refresh
Refresh	Refresh.h	/^  Refresh(Controller<T>* ctrl) : ctrl(ctrl) {$/;"	f	class:ramulator::Refresh
Refresh	Refresh.h	/^class Refresh {$/;"	c	namespace:ramulator
RefreshMode	DDR4.h	/^    enum class RefreshMode : int$/;"	c	class:ramulator::DDR4
RefreshMode	DSARP.h	/^    enum class RefreshMode : int$/;"	c	class:ramulator::DSARP
RefreshMode	LPDDR4.h	/^    enum class RefreshMode : int$/;"	c	class:ramulator::LPDDR4
Refresh_1X	DDR4.h	/^        Refresh_1X,$/;"	m	class:ramulator::DDR4::RefreshMode
Refresh_1X	DSARP.h	/^        Refresh_1X,$/;"	m	class:ramulator::DSARP::RefreshMode
Refresh_1X	LPDDR4.h	/^        Refresh_1X,$/;"	m	class:ramulator::LPDDR4::RefreshMode
Refresh_2X	DDR4.h	/^        Refresh_2X,$/;"	m	class:ramulator::DDR4::RefreshMode
Refresh_2X	LPDDR4.h	/^        Refresh_2X,$/;"	m	class:ramulator::LPDDR4::RefreshMode
Refresh_4X	DDR4.h	/^        Refresh_4X,$/;"	m	class:ramulator::DDR4::RefreshMode
Refresh_4X	LPDDR4.h	/^        Refresh_4X,$/;"	m	class:ramulator::LPDDR4::RefreshMode
ReqIter	Scheduler.h	/^    typedef list<Request>::iterator ReqIter;$/;"	t	class:ramulator::Scheduler
Request	Request.h	/^            Request()$/;"	f	class:ramulator::Request
Request	Request.h	/^            Request(long addr, Type type, function<void(Request&)> callback, int coreid = 0)$/;"	f	class:ramulator::Request
Request	Request.h	/^            Request(long addr, Type type, int coreid = 0)$/;"	f	class:ramulator::Request
Request	Request.h	/^            Request(vector<int>& addr_vec, Type type, function<void(Request&)> callback, int coreid = 0)$/;"	f	class:ramulator::Request
Request	Request.h	/^    class Request$/;"	c	namespace:ramulator
Result	StatType.h	/^typedef double Result;$/;"	t	namespace:Stats
RoBaRaCoCh	Memory.h	/^        RoBaRaCoCh,$/;"	m	class:ramulator::Memory::Type
Row	ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::ALDRAM::Level
Row	DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR3::Level
Row	DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::DDR4::Level
Row	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
Row	GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::GDDR5::Level
Row	HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:ramulator::HBM::Level
Row	LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR3::Level
Row	LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::LPDDR4::Level
Row	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
Row	TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::TLDRAM::Level
Row	WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO::Level
Row	WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ramulator::WideIO2::Level
RowPolicy	Scheduler.h	/^    RowPolicy(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:ramulator::RowPolicy
RowPolicy	Scheduler.h	/^class RowPolicy$/;"	c	namespace:ramulator
RowTable	Scheduler.h	/^    RowTable(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:ramulator::RowTable
RowTable	Scheduler.h	/^class RowTable$/;"	c	namespace:ramulator
SALP	SALP.cpp	/^SALP::SALP(Org org, Speed speed, Type type, int n_sa) :$/;"	f	class:SALP
SALP	SALP.cpp	/^SALP::SALP(const string& org_str, const string& speed_str, const string& type_str, int n_sa) :$/;"	f	class:SALP
SALP	SALP.h	/^class SALP$/;"	c	namespace:ramulator
SALP_1	SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:ramulator::SALP::Type
SALP_1066E	SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:ramulator::SALP::Speed
SALP_1066F	SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:ramulator::SALP::Speed
SALP_1066G	SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:ramulator::SALP::Speed
SALP_1333G	SALP.h	/^        SALP_1333G, SALP_1333H,$/;"	m	class:ramulator::SALP::Speed
SALP_1333H	SALP.h	/^        SALP_1333G, SALP_1333H,$/;"	m	class:ramulator::SALP::Speed
SALP_1600H	SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:ramulator::SALP::Speed
SALP_1600J	SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:ramulator::SALP::Speed
SALP_1600K	SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:ramulator::SALP::Speed
SALP_1866K	SALP.h	/^        SALP_1866K, SALP_1866L,$/;"	m	class:ramulator::SALP::Speed
SALP_1866L	SALP.h	/^        SALP_1866K, SALP_1866L,$/;"	m	class:ramulator::SALP::Speed
SALP_1Gb_x16	SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_1Gb_x4	SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_1Gb_x8	SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_2	SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:ramulator::SALP::Type
SALP_2133L	SALP.h	/^        SALP_2133L, SALP_2133M,$/;"	m	class:ramulator::SALP::Speed
SALP_2133M	SALP.h	/^        SALP_2133L, SALP_2133M,$/;"	m	class:ramulator::SALP::Speed
SALP_2Gb_x16	SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_2Gb_x4	SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_2Gb_x8	SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_4Gb_x16	SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_4Gb_x4	SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_4Gb_x8	SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_512Mb_x16	SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_512Mb_x4	SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_512Mb_x8	SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_800D	SALP.h	/^        SALP_800D,  SALP_800E,$/;"	m	class:ramulator::SALP::Speed
SALP_800E	SALP.h	/^        SALP_800D,  SALP_800E,$/;"	m	class:ramulator::SALP::Speed
SALP_8Gb_x16	SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_8Gb_x4	SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:ramulator::SALP::Org
SALP_8Gb_x8	SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:ramulator::SALP::Org
SARP	DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:ramulator::DSARP::Type
SASEL	SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
SELFREFRESH	Request.h	/^                SELFREFRESH,$/;"	m	class:ramulator::Request::Type
SRE	ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::ALDRAM::Command
SRE	DDR3.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR3::Command
SRE	DDR4.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR4::Command
SRE	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
SRE	GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::GDDR5::Command
SRE	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
SRE	SALP.h	/^        REF, PDE,   PDX, SRE, SRX, $/;"	m	class:ramulator::SALP::Command
SRE	TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::TLDRAM::Command
SREF	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
SREF	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
SREF	WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO::Command
SREF	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
SREFX	LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX, $/;"	m	class:ramulator::LPDDR3::Command
SREFX	LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX, $/;"	m	class:ramulator::LPDDR4::Command
SREFX	WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO::Command
SREFX	WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX, $/;"	m	class:ramulator::WideIO2::Command
SRX	ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::ALDRAM::Command
SRX	DDR3.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR3::Command
SRX	DDR4.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::DDR4::Command
SRX	DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::DSARP::Command
SRX	GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX, $/;"	m	class:ramulator::GDDR5::Command
SRX	HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:ramulator::HBM::Command
SRX	SALP.h	/^        REF, PDE,   PDX, SRE, SRX, $/;"	m	class:ramulator::SALP::Command
SRX	TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:ramulator::TLDRAM::Command
Scalar	StatType.h	/^  Scalar():_value(0) {}$/;"	f	class:Stats::Scalar
Scalar	StatType.h	/^class Scalar: public ScalarBase<Scalar> {$/;"	c	namespace:Stats
ScalarBase	StatType.h	/^class ScalarBase: public Stat<ScalarType> {$/;"	c	namespace:Stats
ScalarStat	Statistics.h	/^class ScalarStat : public ScalarStatBase<Stats::Scalar> {$/;"	c	namespace:ramulator
ScalarStatBase	Statistics.h	/^class ScalarStatBase : public StatBase<StatType> { \/\/ wrapper for Stats::ScalarBase$/;"	c	namespace:ramulator
Scheduler	Scheduler.h	/^    Scheduler(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:ramulator::Scheduler
Scheduler	Scheduler.h	/^class Scheduler$/;"	c	namespace:ramulator
Selected	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
SelfRefresh	ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::ALDRAM::State
SelfRefresh	DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR3::State
SelfRefresh	DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DDR4::State
SelfRefresh	DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::DSARP::State
SelfRefresh	GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::GDDR5::State
SelfRefresh	HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::HBM::State
SelfRefresh	LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR3::State
SelfRefresh	LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::LPDDR4::State
SelfRefresh	SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::SALP::State
SelfRefresh	TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::TLDRAM::State
SelfRefresh	WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO::State
SelfRefresh	WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ramulator::WideIO2::State
Speed	ALDRAM.h	/^    enum class Speed : int$/;"	c	class:ramulator::ALDRAM
Speed	DDR3.h	/^    enum class Speed : int$/;"	c	class:ramulator::DDR3
Speed	DDR4.h	/^    enum class Speed : int$/;"	c	class:ramulator::DDR4
Speed	DSARP.h	/^    enum class Speed : int$/;"	c	class:ramulator::DSARP
Speed	GDDR5.h	/^    enum class Speed : int$/;"	c	class:ramulator::GDDR5
Speed	HBM.h	/^    enum class Speed : int$/;"	c	class:ramulator::HBM
Speed	LPDDR3.h	/^    enum class Speed : int$/;"	c	class:ramulator::LPDDR3
Speed	LPDDR4.h	/^    enum class Speed : int$/;"	c	class:ramulator::LPDDR4
Speed	SALP.h	/^    enum class Speed : int$/;"	c	class:ramulator::SALP
Speed	TLDRAM.h	/^    enum class Speed : int$/;"	c	class:ramulator::TLDRAM
Speed	WideIO.h	/^    enum class Speed : int$/;"	c	class:ramulator::WideIO
Speed	WideIO2.h	/^    enum class Speed : int$/;"	c	class:ramulator::WideIO2
SpeedEntry	ALDRAM.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::ALDRAM
SpeedEntry	DDR3.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::DDR3
SpeedEntry	DDR4.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::DDR4
SpeedEntry	DSARP.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::DSARP
SpeedEntry	GDDR5.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::GDDR5
SpeedEntry	HBM.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::HBM
SpeedEntry	LPDDR3.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::LPDDR3
SpeedEntry	LPDDR4.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::LPDDR4
SpeedEntry	SALP.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::SALP
SpeedEntry	TLDRAM.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::TLDRAM
SpeedEntry	WideIO.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::WideIO
SpeedEntry	WideIO2.h	/^    struct SpeedEntry {$/;"	s	class:ramulator::WideIO2
SpeedyController	SpeedyController.h	/^    SpeedyController(const Config& configs, DRAM<T>* channel) :$/;"	f	class:ramulator::SpeedyController
SpeedyController	SpeedyController.h	/^class SpeedyController$/;"	c	namespace:ramulator
StandardDeviation	StatType.h	/^  StandardDeviation():sum(Counter()), squares(Counter()),$/;"	f	class:Stats::StandardDeviation
StandardDeviation	StatType.h	/^class StandardDeviation: public Stat<StandardDeviation> {$/;"	c	namespace:Stats
StandardDeviationStat	Statistics.h	/^class StandardDeviationStat : public DistStatBase<Stats::StandardDeviation> {$/;"	c	namespace:ramulator
Stat	StatType.h	/^  Stat() {$/;"	f	class:Stats::Stat
Stat	StatType.h	/^class Stat : public StatBase {$/;"	c	namespace:Stats
StatBase	StatType.h	/^class StatBase {$/;"	c	namespace:Stats
StatBase	Statistics.h	/^    StatBase() {}$/;"	f	class:ramulator::StatBase
StatBase	Statistics.h	/^    StatBase(std::string _name) {$/;"	f	class:ramulator::StatBase
StatBase	Statistics.h	/^    StatBase(std::string _name, std::string _desc) {$/;"	f	class:ramulator::StatBase
StatBase	Statistics.h	/^class StatBase { \/\/ wrapper for Stats::DataWrap$/;"	c	namespace:ramulator
StatBaseVec	Statistics.h	/^class StatBaseVec : public StatBase<StatType> { \/\/ wrapper for Stats::DataWrapVec$/;"	c	namespace:ramulator
StatList	StatType.h	/^class StatList {$/;"	c	namespace:Stats
State	ALDRAM.h	/^    enum class State : int$/;"	c	class:ramulator::ALDRAM
State	DDR3.h	/^    enum class State : int$/;"	c	class:ramulator::DDR3
State	DDR4.h	/^    enum class State : int$/;"	c	class:ramulator::DDR4
State	DSARP.h	/^    enum class State : int$/;"	c	class:ramulator::DSARP
State	GDDR5.h	/^    enum class State : int$/;"	c	class:ramulator::GDDR5
State	HBM.h	/^    enum class State : int$/;"	c	class:ramulator::HBM
State	LPDDR3.h	/^    enum class State : int$/;"	c	class:ramulator::LPDDR3
State	LPDDR4.h	/^    enum class State : int$/;"	c	class:ramulator::LPDDR4
State	SALP.h	/^    enum class State : int$/;"	c	class:ramulator::SALP
State	TLDRAM.h	/^    enum class State : int$/;"	c	class:ramulator::TLDRAM
State	WideIO.h	/^    enum class State : int$/;"	c	class:ramulator::WideIO
State	WideIO2.h	/^    enum class State : int$/;"	c	class:ramulator::WideIO2
Stats	StatType.cpp	/^namespace Stats {$/;"	n	file:
Stats	StatType.h	/^namespace Stats {$/;"	n
SubArray	DSARP.h	/^      Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::DSARP::Level
SubArray	SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:ramulator::SALP::Level
TLDRAM	TLDRAM.cpp	/^TLDRAM::TLDRAM(Org org, Speed speed, int segment_ratio) :$/;"	f	class:TLDRAM
TLDRAM	TLDRAM.cpp	/^TLDRAM::TLDRAM(const string& org_str, const string& speed_str, int segment_ratio) :$/;"	f	class:TLDRAM
TLDRAM	TLDRAM.h	/^class TLDRAM$/;"	c	namespace:ramulator
TLDRAM_1066E	TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1066F	TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1066G	TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1333G	TLDRAM.h	/^        TLDRAM_1333G, TLDRAM_1333H,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1333H	TLDRAM.h	/^        TLDRAM_1333G, TLDRAM_1333H,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1600H	TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1600J	TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1600K	TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1866K	TLDRAM.h	/^        TLDRAM_1866K, TLDRAM_1866L,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1866L	TLDRAM.h	/^        TLDRAM_1866K, TLDRAM_1866L,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_1Gb_x16	TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_1Gb_x4	TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_1Gb_x8	TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_2133L	TLDRAM.h	/^        TLDRAM_2133L, TLDRAM_2133M,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_2133M	TLDRAM.h	/^        TLDRAM_2133L, TLDRAM_2133M,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_2Gb_x16	TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_2Gb_x4	TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_2Gb_x8	TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_4Gb_x16	TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_4Gb_x4	TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_4Gb_x8	TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_512Mb_x16	TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_512Mb_x4	TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_512Mb_x8	TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_800D	TLDRAM.h	/^        TLDRAM_800D,  TLDRAM_800E,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_800E	TLDRAM.h	/^        TLDRAM_800D,  TLDRAM_800E,$/;"	m	class:ramulator::TLDRAM::Speed
TLDRAM_8Gb_x16	TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_8Gb_x4	TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
TLDRAM_8Gb_x8	TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:ramulator::TLDRAM::Org
Temp	ALDRAM.h	/^    enum class Temp : int$/;"	c	class:ramulator::ALDRAM
Tick	StatType.h	/^typedef uint64_t Tick;$/;"	t	namespace:Stats
Timeout	Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:ramulator::RowPolicy::Type
TimingEntry	ALDRAM.h	/^    struct TimingEntry$/;"	s	class:ramulator::ALDRAM
TimingEntry	DDR3.h	/^    struct TimingEntry$/;"	s	class:ramulator::DDR3
TimingEntry	DDR4.h	/^    struct TimingEntry$/;"	s	class:ramulator::DDR4
TimingEntry	DSARP.h	/^    struct TimingEntry$/;"	s	class:ramulator::DSARP
TimingEntry	GDDR5.h	/^    struct TimingEntry$/;"	s	class:ramulator::GDDR5
TimingEntry	HBM.h	/^    struct TimingEntry$/;"	s	class:ramulator::HBM
TimingEntry	LPDDR3.h	/^    struct TimingEntry$/;"	s	class:ramulator::LPDDR3
TimingEntry	LPDDR4.h	/^    struct TimingEntry$/;"	s	class:ramulator::LPDDR4
TimingEntry	SALP.h	/^    struct TimingEntry$/;"	s	class:ramulator::SALP
TimingEntry	TLDRAM.h	/^    struct TimingEntry$/;"	s	class:ramulator::TLDRAM
TimingEntry	WideIO.h	/^    struct TimingEntry$/;"	s	class:ramulator::WideIO
TimingEntry	WideIO2.h	/^    struct TimingEntry$/;"	s	class:ramulator::WideIO2
Trace	Processor.cpp	/^Trace::Trace(const char* trace_fname) : file(trace_fname), trace_name(trace_fname)$/;"	f	class:Trace
Trace	Processor.h	/^class Trace {$/;"	c	namespace:ramulator
Translation	Memory.h	/^    enum class Translation {$/;"	c	class:ramulator::Memory
Type	DSARP.h	/^    enum class Type : int$/;"	c	class:ramulator::DSARP
Type	Memory.h	/^    enum class Type {$/;"	c	class:ramulator::Memory
Type	Request.h	/^            enum class Type$/;"	c	class:ramulator::Request
Type	SALP.h	/^    enum class Type : int$/;"	c	class:ramulator::SALP
Type	Scheduler.h	/^    enum class Type {$/;"	c	class:ramulator::RowPolicy
Type	Scheduler.h	/^    enum class Type {$/;"	c	class:ramulator::Scheduler
UDF	Request.h	/^    struct UDF{$/;"	s	namespace:ramulator
VCounter	StatType.h	/^typedef std::vector<Counter> VCounter;$/;"	t	namespace:Stats
VResult	StatType.h	/^typedef std::vector<Result> VResult;$/;"	t	namespace:Stats
Vector	StatType.h	/^class Vector: public VectorBase<Vector, Scalar> {$/;"	c	namespace:Stats
VectorBase	StatType.h	/^class VectorBase: public Stat<Derived> {$/;"	c	namespace:Stats
VectorStat	Statistics.h	/^class VectorStat : public VectorStatBase<Stats::Vector, Stats::Scalar> {$/;"	c	namespace:ramulator
VectorStatBase	Statistics.h	/^class VectorStatBase : public StatBaseVec<StatType> { \/\/ wrapper for Stats::VectorBase$/;"	c	namespace:ramulator
Vertex	graph.h	/^        explicit Vertex(int _idx) {$/;"	f	class:Vertex
Vertex	graph.h	/^class Vertex {$/;"	c
WR	ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::ALDRAM::Command
WR	DDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR3::Command
WR	DDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR4::Command
WR	DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::DSARP::Command
WR	GDDR5.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::GDDR5::Command
WR	HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:ramulator::HBM::Command
WR	LPDDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR3::Command
WR	LPDDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR4::Command
WR	SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
WR	TLDRAM.h	/^        RD, WR,$/;"	m	class:ramulator::TLDRAM::Command
WR	WideIO.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::WideIO::Command
WR	WideIO2.h	/^        RD,  WR,    RDA,  WRA, $/;"	m	class:ramulator::WideIO2::Command
WRA	ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::ALDRAM::Command
WRA	DDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR3::Command
WRA	DDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::DDR4::Command
WRA	DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ramulator::DSARP::Command
WRA	GDDR5.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::GDDR5::Command
WRA	HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:ramulator::HBM::Command
WRA	LPDDR3.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR3::Command
WRA	LPDDR4.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::LPDDR4::Command
WRA	SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:ramulator::SALP::Command
WRA	WideIO.h	/^        RD,  WR,  RDA,  WRA, $/;"	m	class:ramulator::WideIO::Command
WRA	WideIO2.h	/^        RD,  WR,    RDA,  WRA, $/;"	m	class:ramulator::WideIO2::Command
WRITE	Request.h	/^                WRITE,$/;"	m	class:ramulator::Request::Type
WideIO	WideIO.cpp	/^WideIO::WideIO(Org org, Speed speed) : $/;"	f	class:WideIO
WideIO	WideIO.cpp	/^WideIO::WideIO(const string& org_str, const string& speed_str) :$/;"	f	class:WideIO
WideIO	WideIO.h	/^class WideIO$/;"	c	namespace:ramulator
WideIO2	WideIO2.cpp	/^WideIO2::WideIO2(Org org, Speed speed, int channels) :  $/;"	f	class:WideIO2
WideIO2	WideIO2.cpp	/^WideIO2::WideIO2(const string& org_str, const string& speed_str, int channels) :$/;"	f	class:WideIO2
WideIO2	WideIO2.h	/^class WideIO2$/;"	c	namespace:ramulator
WideIO2_1066	WideIO2.h	/^        WideIO2_1066,$/;"	m	class:ramulator::WideIO2::Speed
WideIO2_800	WideIO2.h	/^        WideIO2_800,$/;"	m	class:ramulator::WideIO2::Speed
WideIO2_8Gb	WideIO2.h	/^        WideIO2_8Gb,$/;"	m	class:ramulator::WideIO2::Org
WideIO_1Gb	WideIO.h	/^        WideIO_1Gb,$/;"	m	class:ramulator::WideIO::Org
WideIO_200	WideIO.h	/^        WideIO_200,$/;"	m	class:ramulator::WideIO::Speed
WideIO_266	WideIO.h	/^        WideIO_266,$/;"	m	class:ramulator::WideIO::Speed
WideIO_2Gb	WideIO.h	/^        WideIO_2Gb,$/;"	m	class:ramulator::WideIO::Org
WideIO_4Gb	WideIO.h	/^        WideIO_4Gb,$/;"	m	class:ramulator::WideIO::Org
WideIO_8Gb	WideIO.h	/^        WideIO_8Gb,$/;"	m	class:ramulator::WideIO::Org
Window	Processor.h	/^    Window() : ready_list(depth), addr_list(depth, -1) {}$/;"	f	class:ramulator::Window
Window	Processor.h	/^class Window {$/;"	c	namespace:ramulator
__ALDRAM_H	ALDRAM.h	2;"	d
__CACHE_H	Cache.h	2;"	d
__COMMON_H__	common.h	2;"	d
__CONFIG_H	Config.h	2;"	d
__CONTROLLER_H	Controller.h	2;"	d
__DDR3_H	DDR3.h	2;"	d
__DDR4_H	DDR4.h	2;"	d
__DRAM_H	DRAM.h	2;"	d
__GDDR5_H	GDDR5.h	2;"	d
__GEM5_WRAPPER_H	Gem5Wrapper.h	2;"	d
__GRAPH_H__	graph.h	2;"	d
__HBM_H	HBM.h	2;"	d
__LPDDR3_H	LPDDR3.h	2;"	d
__LPDDR4_H	LPDDR4.h	2;"	d
__MEMORY_FACTORY_H	MemoryFactory.h	2;"	d
__MEMORY_H	Memory.h	2;"	d
__MEM_WRAPPER_H__	MemWrapper.h	2;"	d
__PE_H__	pe.h	2;"	d
__PROCESSOR_H	Processor.h	2;"	d
__REFRESH_H_	Refresh.h	17;"	d
__REQUEST_H	Request.h	2;"	d
__SALP_H	SALP.h	2;"	d
__SCHEDULER_H	Scheduler.h	2;"	d
__SPEEDYCONTROLLER_H	SpeedyController.h	2;"	d
__STATISTICS_H	Statistics.h	2;"	d
__STATTYPE_H	StatType.h	2;"	d
__TLDRAM_H	TLDRAM.h	2;"	d
__USER_H__	User.h	2;"	d
__WIDEIO2_H	WideIO2.h	2;"	d
__WIDEIO_H	WideIO.h	2;"	d
_desc	StatType.h	/^  std::string _desc;$/;"	m	class:Stats::Stat
_flags	StatType.h	/^  Flags _flags = display;$/;"	m	class:Stats::Stat
_name	StatType.h	/^  std::string _name;$/;"	m	class:Stats::Stat
_precision	StatType.h	/^  int _precision = 1;$/;"	m	class:Stats::Stat
_size	StatType.h	/^  size_type _size = 0;$/;"	m	class:Stats::VectorBase
_value	StatType.h	/^  Counter _value;$/;"	m	class:Stats::ConstValue
_value	StatType.h	/^  Counter _value;$/;"	m	class:Stats::Scalar
active_cycles	DRAM.h	/^    ScalarStat active_cycles;$/;"	m	class:ramulator::DRAM
active_refresh_overlap_cycles	DRAM.h	/^    ScalarStat active_refresh_overlap_cycles;$/;"	m	class:ramulator::DRAM
add	Config.h	/^    void add (const std::string& name, const std::string& value) {$/;"	f	class:ramulator::Config
add	StatType.cpp	/^Histogram::add(Histogram &hs)$/;"	f	class:Stats::Histogram
add	StatType.h	/^  void add(AverageDeviation& ad) {$/;"	f	class:Stats::AverageDeviation
add	StatType.h	/^  void add(Distribution &d) {$/;"	f	class:Stats::Distribution
add	StatType.h	/^  void add(StandardDeviation& sd) {$/;"	f	class:Stats::StandardDeviation
add	StatType.h	/^  void add(StatBase* stat) {$/;"	f	class:Stats::StatList
add	Statistics.h	/^    void add(DistStatBase & d) { StatBase<StatType>::stat.add(d.StatBase<StatType>::stat); }$/;"	f	class:ramulator::DistStatBase
addr	Cache.h	/^    long addr;$/;"	m	struct:ramulator::Cache::Line
addr	Request.h	/^            long addr;$/;"	m	class:ramulator::Request
addr	common.h	/^        long addr;$/;"	m	struct:BurstOp
addrVec	common.h	/^        std::vector<long> addrVec;$/;"	m	struct:BurstOp
addr_bits	Memory.h	/^    vector<int> addr_bits;$/;"	m	class:ramulator::Memory
addr_list	Processor.h	/^    std::vector<long> addr_list;$/;"	m	class:ramulator::Window
addr_vec	Request.h	/^            vector<int> addr_vec;$/;"	m	class:ramulator::Request
aldram_timing	ALDRAM.cpp	/^void ALDRAM::aldram_timing(Temp current_temperature)$/;"	f	class:ALDRAM
align	Cache.h	/^  long align(long addr) {$/;"	f	class:ramulator::Cache
all_sets_locked	Cache.h	/^  bool all_sets_locked(const std::list<Line>& lines) {$/;"	f	class:ramulator::Cache
allocate_line	Cache.cpp	/^std::list<Cache::Line>::iterator Cache::allocate_line($/;"	f	class:ramulator::Cache
alpha	common.cpp	/^float GL::alpha = 0.2;$/;"	m	class:GL	file:
alpha	common.h	/^        static float alpha;$/;"	m	class:GL
arrive	Request.h	/^            long arrive = -1;$/;"	m	class:ramulator::Request
arriveMemTime	Request.h	/^        long arriveMemTime;$/;"	m	struct:ramulator::UDF
arriveMemTime	common.h	/^        long arriveMemTime;$/;"	m	struct:BurstOp
arrivePeTime	Request.h	/^        long arrivePeTime;$/;"	m	struct:ramulator::UDF
arrivePeTime	common.h	/^        long arrivePeTime;$/;"	m	struct:BurstOp
assoc	Cache.h	/^  unsigned int assoc;$/;"	m	class:ramulator::Cache
average_serving_requests	DRAM.h	/^    ScalarStat average_serving_requests;$/;"	m	class:ramulator::DRAM
b_ref_rank	DSARP.h	/^    bool b_ref_rank;$/;"	m	class:ramulator::DSARP
backlog_early_pull_threshold	Refresh.h	/^  int backlog_early_pull_threshold = -6;$/;"	m	class:ramulator::Refresh
backlog_max	Refresh.h	/^  int backlog_max = 8;$/;"	m	class:ramulator::Refresh
backlog_min	Refresh.h	/^  int backlog_min = -8;$/;"	m	class:ramulator::Refresh
bank_ref_counters	Refresh.h	/^  vector<int> bank_ref_counters;$/;"	m	class:ramulator::Refresh
bank_refresh_backlog	Refresh.h	/^  vector<vector<int>*> bank_refresh_backlog;$/;"	m	class:ramulator::Refresh
baseLen	common.cpp	/^int GL::baseLen = 1024; \/\/ 1024 bytes$/;"	m	class:GL	file:
baseLen	common.h	/^        static int baseLen;$/;"	m	class:GL
begin_of_cur_reqcnt	DRAM.h	/^    long begin_of_cur_reqcnt = -1;$/;"	m	class:ramulator::DRAM
begin_of_refreshing	DRAM.h	/^    long begin_of_refreshing = -1;$/;"	m	class:ramulator::DRAM
begin_of_serving	DRAM.h	/^    long begin_of_serving = -1;$/;"	m	class:ramulator::DRAM
beta	common.cpp	/^int GL::beta = 5000;$/;"	m	class:GL	file:
beta	common.h	/^        static int beta; $/;"	m	class:GL
bfsController	pe.cpp	/^void pe::bfsController(){$/;"	f	class:pe
bfsDone	MemWrapper.h	/^        sc_in <bool> bfsDone;$/;"	m	class:MemWrapper
bfsDone	pe.h	/^        sc_out<bool> bfsDone;$/;"	m	class:pe
bfsIterationStart	pe.h	/^        bool bfsIterationStart;$/;"	m	class:pe
block_num	Cache.h	/^  unsigned int block_num;$/;"	m	class:ramulator::Cache
block_size	Cache.h	/^  unsigned int block_size;$/;"	m	class:ramulator::Cache
bubble_cnt	Processor.h	/^    long bubble_cnt;$/;"	m	class:ramulator::Core
bucket_size	StatType.h	/^  Counter bucket_size;$/;"	m	class:Stats::Distribution
bucket_size	StatType.h	/^  Counter bucket_size;$/;"	m	class:Stats::Histogram
bufferToBurstReq	common.h	/^        void bufferToBurstReq(std::list<T> &buffer){$/;"	f	struct:BurstOp
burstAddrWidth	common.cpp	/^int GL::burstAddrWidth = GL::getBurstAddrWidth();$/;"	m	class:GL	file:
burstAddrWidth	common.h	/^        static int burstAddrWidth;$/;"	m	class:GL
burstIdx	Request.h	/^        long burstIdx;$/;"	m	struct:ramulator::UDF
burstIdx	common.cpp	/^long GL::burstIdx = -1;$/;"	m	class:GL	file:
burstIdx	common.h	/^        long burstIdx;$/;"	m	struct:BurstOp
burstIdx	common.h	/^        static long burstIdx;$/;"	m	class:GL
burstIdxReorderQueue	pe.h	/^        std::vector<std::list<int>> burstIdxReorderQueue;$/;"	m	class:pe
burstLen	common.cpp	/^int GL::burstLen = 64;$/;"	m	class:GL	file:
burstLen	common.h	/^        static int burstLen; $/;"	m	class:GL
burstOpPtype	pe.h	/^        std::map<long, PortType> burstOpPtype;$/;"	m	class:pe
burstOpStatus	pe.h	/^        std::map<long, bool> burstOpStatus;$/;"	m	class:pe
burstReq	MemWrapper.h	/^        sc_in <BurstOp> burstReq;$/;"	m	class:MemWrapper
burstReq	pe.h	/^        sc_out<BurstOp> burstReq;$/;"	m	class:pe
burstReqArbiter	pe.cpp	/^PortType pe::burstReqArbiter(PortType winner){$/;"	f	class:pe
burstReqQueue	MemWrapper.h	/^        std::list<BurstOp> burstReqQueue;$/;"	m	class:MemWrapper
burstReqQueue	pe.h	/^        std::vector<std::list<BurstOp>> burstReqQueue;$/;"	m	class:pe
burstReqToBuffer	common.h	/^        void burstReqToBuffer(std::list<T> &buffer){$/;"	f	struct:BurstOp
burstResp	MemWrapper.h	/^        sc_out <BurstOp> burstResp;$/;"	m	class:MemWrapper
burstResp	pe.h	/^        sc_in<BurstOp> burstResp;$/;"	m	class:pe
burstRespQueue	MemWrapper.h	/^        std::list<BurstOp> burstRespQueue;$/;"	m	class:MemWrapper
burstRespQueue	pe.h	/^        std::vector<std::list<BurstOp>> burstRespQueue;$/;"	m	class:pe
burstStatus	MemWrapper.h	/^        std::map<long, bool> burstStatus;$/;"	m	class:MemWrapper
busy_cycles	DRAM.h	/^    ScalarStat busy_cycles;$/;"	m	class:ramulator::DRAM
cacheThreshold	common.cpp	/^int GL::cacheThreshold = 0;$/;"	m	class:GL	file:
cacheThreshold	common.h	/^        static int cacheThreshold;$/;"	m	class:GL
cache_eviction	Cache.h	/^  ScalarStat cache_eviction;$/;"	m	class:ramulator::Cache
cache_lines	Cache.h	/^  std::map<int, std::list<Line> > cache_lines;$/;"	m	class:ramulator::Cache
cache_mshr_hit	Cache.h	/^  ScalarStat cache_mshr_hit;$/;"	m	class:ramulator::Cache
cache_mshr_unavailable	Cache.h	/^  ScalarStat cache_mshr_unavailable;$/;"	m	class:ramulator::Cache
cache_read_access	Cache.h	/^  ScalarStat cache_read_access;$/;"	m	class:ramulator::Cache
cache_read_miss	Cache.h	/^  ScalarStat cache_read_miss;$/;"	m	class:ramulator::Cache
cache_set_unavailable	Cache.h	/^  ScalarStat cache_set_unavailable;$/;"	m	class:ramulator::Cache
cache_total_access	Cache.h	/^  ScalarStat cache_total_access;$/;"	m	class:ramulator::Cache
cache_total_miss	Cache.h	/^  ScalarStat cache_total_miss;$/;"	m	class:ramulator::Cache
cache_write_access	Cache.h	/^  ScalarStat cache_write_access;$/;"	m	class:ramulator::Cache
cache_write_miss	Cache.h	/^  ScalarStat cache_write_miss;$/;"	m	class:ramulator::Cache
caches	Processor.h	/^    std::vector<std::shared_ptr<Cache>> caches;$/;"	m	class:ramulator::Core
cachesys	Cache.h	/^  std::shared_ptr<CacheSystem> cachesys;$/;"	m	class:ramulator::Cache
cachesys	Processor.h	/^    std::shared_ptr<CacheSystem> cachesys;$/;"	m	class:ramulator::Processor
calBurstLen	MemWrapper.cpp	/^int MemWrapper::calBurstLen(){$/;"	f	class:MemWrapper
calc_ipc	Processor.cpp	/^double Core::calc_ipc()$/;"	f	class:Core
calc_log2	Cache.h	/^  int calc_log2(int val) {$/;"	f	class:ramulator::Cache
calc_log2	Memory.h	/^    int calc_log2(int val){$/;"	f	class:ramulator::Memory
calc_weighted_speedup	Config.h	/^    bool calc_weighted_speedup() const {$/;"	f	class:ramulator::Config
callback	Cache.cpp	/^void Cache::callback(Request& req) {$/;"	f	class:ramulator::Cache
callback	Processor.h	/^    function<void(Request&)> callback;$/;"	m	class:ramulator::Core
callback	Request.h	/^            function<void(Request&)> callback; \/\/ call back with more info$/;"	m	class:ramulator::Request
cap	Scheduler.h	/^    long cap = 16;$/;"	m	class:ramulator::Scheduler
cdf	StatType.h	/^const uint16_t cdf       = 0x00000040;$/;"	m	namespace:Stats
cfgBfsParam	common.cpp	/^void GL::cfgBfsParam(const std::string &cfgFileName){$/;"	f	class:GL
channel	Controller.h	/^    DRAM<T>* channel;$/;"	m	class:ramulator::Controller
channel	SpeedyController.h	/^    DRAM<T>* channel;$/;"	m	class:ramulator::SpeedyController
channel_width	ALDRAM.h	/^    int channel_width = 64;$/;"	m	class:ramulator::ALDRAM
channel_width	DDR3.h	/^    int channel_width = 64;$/;"	m	class:ramulator::DDR3
channel_width	DDR4.h	/^    int channel_width = 64;$/;"	m	class:ramulator::DDR4
channel_width	DSARP.h	/^    int channel_width = 32;$/;"	m	class:ramulator::DSARP
channel_width	GDDR5.h	/^    int channel_width = 64;$/;"	m	class:ramulator::GDDR5
channel_width	HBM.h	/^    int channel_width = 128;$/;"	m	class:ramulator::HBM
channel_width	LPDDR3.h	/^    int channel_width = 64;$/;"	m	class:ramulator::LPDDR3
channel_width	LPDDR4.h	/^    int channel_width = 32;$/;"	m	class:ramulator::LPDDR4
channel_width	SALP.h	/^    int channel_width = 64;$/;"	m	class:ramulator::SALP
channel_width	TLDRAM.h	/^    int channel_width = 64;$/;"	m	class:ramulator::TLDRAM
channel_width	WideIO.h	/^    int channel_width = 128;$/;"	m	class:ramulator::WideIO
channel_width	WideIO2.h	/^    int channel_width = 64;$/;"	m	class:ramulator::WideIO2
channels	Config.h	/^    int channels;$/;"	m	class:ramulator::Config
check	DRAM.h	/^bool DRAM<T>::check(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:ramulator::DRAM
check	StatType.h	/^  bool check() const {$/;"	f	class:Stats::VectorBase
check	Statistics.h	/^    bool check(void) const { return StatBase<StatType>::stat.check(); }$/;"	f	class:ramulator::VectorStatBase
check_row_hit	DRAM.h	/^bool DRAM<T>::check_row_hit(typename T::Command cmd, const int* addr)$/;"	f	class:ramulator::DRAM
check_row_open	DRAM.h	/^bool DRAM<T>::check_row_open(typename T::Command cmd, const int* addr)$/;"	f	class:ramulator::DRAM
check_unlock	Cache.h	/^  bool check_unlock(long addr) {$/;"	f	class:ramulator::Cache
children	DRAM.h	/^    vector<DRAM*> children;$/;"	m	class:ramulator::DRAM
ciaiBufferDepth	common.cpp	/^int GL::ciaiBufferDepth = 4096;$/;"	m	class:GL	file:
ciaiBufferDepth	common.h	/^        static int ciaiBufferDepth;$/;"	m	class:GL
ciaiMemAddr	common.cpp	/^long GL::ciaiMemAddr = 0;$/;"	m	class:GL	file:
ciaiMemAddr	common.h	/^        static long ciaiMemAddr;$/;"	m	class:GL
ciaoBufferDepth	common.cpp	/^int GL::ciaoBufferDepth = 4096;$/;"	m	class:GL	file:
ciaoBufferDepth	common.h	/^        static int ciaoBufferDepth;$/;"	m	class:GL
ciaoMemAddr	common.cpp	/^long GL::ciaoMemAddr = 0;$/;"	m	class:GL	file:
ciaoMemAddr	common.h	/^        static long ciaoMemAddr;$/;"	m	class:GL
cleanProcessedRequests	MemWrapper.cpp	/^void MemWrapper::cleanProcessedRequests(long idx){$/;"	f	class:MemWrapper
cleanRam	MemWrapper.cpp	/^void MemWrapper::cleanRam(){$/;"	f	class:MemWrapper
cleanRespQueue	MemWrapper.cpp	/^void MemWrapper::cleanRespQueue(const std::vector<long> &reqVec){$/;"	f	class:MemWrapper
clear_lower_bits	Memory.h	/^    void clear_lower_bits(long& addr, int bits)$/;"	f	class:ramulator::Memory
clk	Cache.h	/^  long clk = 0;$/;"	m	class:ramulator::CacheSystem
clk	Controller.h	/^    long clk = 0;$/;"	m	class:ramulator::Controller
clk	Processor.h	/^    long clk = 0;$/;"	m	class:ramulator::Core
clk	Refresh.h	/^  long clk, refreshed;$/;"	m	class:ramulator::Refresh
clk	SpeedyController.h	/^    long clk = 0;$/;"	m	class:ramulator::SpeedyController
clk_ns	Memory.h	/^    double clk_ns()$/;"	f	class:ramulator::Memory
cmd	ALDRAM.h	/^        Command cmd;$/;"	m	struct:ramulator::ALDRAM::TimingEntry
cmd	DDR3.h	/^        Command cmd;$/;"	m	struct:ramulator::DDR3::TimingEntry
cmd	DDR4.h	/^        Command cmd;$/;"	m	struct:ramulator::DDR4::TimingEntry
cmd	DSARP.h	/^        Command cmd;$/;"	m	struct:ramulator::DSARP::TimingEntry
cmd	GDDR5.h	/^        Command cmd;$/;"	m	struct:ramulator::GDDR5::TimingEntry
cmd	HBM.h	/^        Command cmd;$/;"	m	struct:ramulator::HBM::TimingEntry
cmd	LPDDR3.h	/^        Command cmd;$/;"	m	struct:ramulator::LPDDR3::TimingEntry
cmd	LPDDR4.h	/^        Command cmd;$/;"	m	struct:ramulator::LPDDR4::TimingEntry
cmd	SALP.h	/^        Command cmd;$/;"	m	struct:ramulator::SALP::TimingEntry
cmd	TLDRAM.h	/^        Command cmd;$/;"	m	struct:ramulator::TLDRAM::TimingEntry
cmd	WideIO.h	/^        Command cmd;$/;"	m	struct:ramulator::WideIO::TimingEntry
cmd	WideIO2.h	/^        Command cmd;$/;"	m	struct:ramulator::WideIO2::TimingEntry
cmd_trace_files	Controller.h	/^    vector<ofstream> cmd_trace_files;$/;"	m	class:ramulator::Controller
cmd_trace_files	SpeedyController.h	/^    vector<ofstream> cmd_trace_files;$/;"	m	class:ramulator::SpeedyController
cmd_trace_prefix	Controller.h	/^    string cmd_trace_prefix = "cmd-trace-";$/;"	m	class:ramulator::Controller
cmd_trace_prefix	SpeedyController.h	/^    string cmd_trace_prefix = "cmd-trace-";$/;"	m	class:ramulator::SpeedyController
command_name	ALDRAM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::ALDRAM
command_name	DDR3.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::DDR3
command_name	DDR4.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::DDR4
command_name	DSARP.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::DSARP
command_name	GDDR5.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::GDDR5
command_name	HBM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::HBM
command_name	LPDDR3.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::LPDDR3
command_name	LPDDR4.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::LPDDR4
command_name	SALP.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::SALP
command_name	TLDRAM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::TLDRAM
command_name	WideIO.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::WideIO
command_name	WideIO2.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ramulator::WideIO2
compair_depart_clk	SpeedyController.h	/^    class compair_depart_clk{$/;"	c	class:ramulator::SpeedyController
compair_first_clk	SpeedyController.h	/^    static bool compair_first_clk(const request_info& lhs, const request_info& rhs) {$/;"	f	class:ramulator::SpeedyController
compare	Scheduler.h	/^    function<ReqIter(ReqIter, ReqIter)> compare[int(Type::MAX)] = {$/;"	m	class:ramulator::Scheduler
concatlower	Cache.cpp	/^void Cache::concatlower(Cache* lower) {$/;"	f	class:ramulator::Cache
configs	MemWrapper.h	/^        Config configs;$/;"	m	class:MemWrapper
contains	Config.h	/^    bool contains(const std::string& name) const {$/;"	f	class:ramulator::Config
convertToReq	common.cpp	/^void BurstOp::convertToReq(std::list<ramulator::Request> &reqQueue){$/;"	f	class:BurstOp
core_num	Config.h	/^    int core_num = 0;$/;"	m	class:ramulator::Config
coreid	Request.h	/^            int coreid;$/;"	m	class:ramulator::Request
cores	Processor.h	/^    std::vector<std::unique_ptr<Core>> cores;$/;"	m	class:ramulator::Processor
count	ALDRAM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::ALDRAM::OrgEntry
count	DDR3.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::DDR3::OrgEntry
count	DDR4.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::DDR4::OrgEntry
count	DSARP.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::DSARP::OrgEntry
count	GDDR5.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::GDDR5::OrgEntry
count	HBM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::HBM::OrgEntry
count	LPDDR3.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::LPDDR3::OrgEntry
count	LPDDR4.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::LPDDR4::OrgEntry
count	SALP.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::SALP::OrgEntry
count	TLDRAM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::TLDRAM::OrgEntry
count	WideIO.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::WideIO::OrgEntry
count	WideIO2.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ramulator::WideIO2::OrgEntry
cpu_cycles	Processor.h	/^    ScalarStat cpu_cycles;$/;"	m	class:ramulator::Processor
cpu_inst	Processor.h	/^    ScalarStat cpu_inst;$/;"	m	class:ramulator::Core
cpu_tick	Config.h	/^    int cpu_tick;$/;"	m	class:ramulator::Config
create	MemoryFactory.cpp	/^MemoryBase *MemoryFactory<SALP>::create(const Config& configs, int cacheline) {$/;"	f	class:ramulator::MemoryFactory
create	MemoryFactory.cpp	/^MemoryBase *MemoryFactory<WideIO2>::create(const Config& configs, int cacheline) {$/;"	f	class:ramulator::MemoryFactory
create	MemoryFactory.h	/^    static MemoryBase *create(const Config& configs, int cacheline)$/;"	f	class:ramulator::MemoryFactory
createReadBurstReq	pe.cpp	/^long pe::createReadBurstReq($/;"	f	class:pe
createWriteBurstReq	pe.h	/^        long createWriteBurstReq($/;"	f	class:pe
ctrl	Refresh.h	/^  Controller<T>* ctrl;$/;"	m	class:ramulator::Refresh
ctrl	Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:ramulator::RowPolicy
ctrl	Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:ramulator::RowTable
ctrl	Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:ramulator::Scheduler
ctrl_write_mode	Refresh.h	/^  bool ctrl_write_mode = false;$/;"	m	class:ramulator::Refresh
ctrls	Memory.h	/^    vector<Controller<T>*> ctrls;$/;"	m	class:ramulator::Memory
curTick	StatType.cpp	/^Tick curTick = 0;$/;"	m	namespace:Stats	file:
cur_clk	DRAM.h	/^    long cur_clk = 0;$/;"	m	class:ramulator::DRAM
cur_serving_requests	DRAM.h	/^    int cur_serving_requests = 0;$/;"	m	class:ramulator::DRAM
current	StatType.h	/^  Counter current;$/;"	m	class:Stats::Average
current_speed	ALDRAM.h	/^    Speed current_speed;$/;"	m	class:ramulator::ALDRAM
cvec	StatType.h	/^  VCounter cvec;$/;"	m	class:Stats::Distribution
cvec	StatType.h	/^  VCounter cvec;$/;"	m	class:Stats::Histogram
data	StatType.h	/^  std::vector<Element> data;$/;"	m	class:Stats::VectorBase
data	common.h	/^        std::vector<char> data;$/;"	m	struct:BurstOp
debug	Cache.cpp	4;"	d	file:
debug	Cache.cpp	6;"	d	file:
dec	StatType.h	/^  void dec(Counter val) {$/;"	f	class:Stats::Average
decode	DRAM.h	/^typename T::Command DRAM<T>::decode(typename T::Command cmd, const int* addr)$/;"	f	class:ramulator::DRAM
depart	Request.h	/^            long depart;$/;"	m	class:ramulator::Request
departMemTime	Request.h	/^        long departMemTime;$/;"	m	struct:ramulator::UDF
departMemTime	common.h	/^        long departMemTime;$/;"	m	struct:BurstOp
departPeTime	Request.h	/^        long departPeTime; $/;"	m	struct:ramulator::UDF
departPeTime	common.h	/^        long departPeTime;$/;"	m	struct:BurstOp
depth	Processor.h	/^    int depth = 128;$/;"	m	class:ramulator::Window
depthBufferDepth	common.cpp	/^int GL::depthBufferDepth = 4096;$/;"	m	class:GL	file:
depthBufferDepth	common.h	/^        static int depthBufferDepth;$/;"	m	class:GL
depthMemAddr	common.cpp	/^long GL::depthMemAddr = 0;$/;"	m	class:GL	file:
depthMemAddr	common.h	/^        static long depthMemAddr;$/;"	m	class:GL
desc	StatType.h	/^  Derived &desc(const std::string &__desc) {$/;"	f	class:Stats::Stat
desc	Statistics.h	/^    StatBase<StatType> & desc(std::string _desc) {$/;"	f	class:ramulator::StatBase
dirty	Cache.h	/^    bool dirty;$/;"	m	struct:ramulator::Cache::Line
display	StatType.h	/^const uint16_t display   = 0x00000002;$/;"	m	namespace:Stats
dist	ALDRAM.h	/^        int dist;$/;"	m	struct:ramulator::ALDRAM::TimingEntry
dist	DDR3.h	/^        int dist;$/;"	m	struct:ramulator::DDR3::TimingEntry
dist	DDR4.h	/^        int dist;$/;"	m	struct:ramulator::DDR4::TimingEntry
dist	DSARP.h	/^        int dist;$/;"	m	struct:ramulator::DSARP::TimingEntry
dist	GDDR5.h	/^        int dist;$/;"	m	struct:ramulator::GDDR5::TimingEntry
dist	HBM.h	/^        int dist;$/;"	m	struct:ramulator::HBM::TimingEntry
dist	LPDDR3.h	/^        int dist;$/;"	m	struct:ramulator::LPDDR3::TimingEntry
dist	LPDDR4.h	/^        int dist;$/;"	m	struct:ramulator::LPDDR4::TimingEntry
dist	SALP.h	/^        int dist;$/;"	m	struct:ramulator::SALP::TimingEntry
dist	StatType.h	/^const uint16_t dist      = 0x00000080;$/;"	m	namespace:Stats
dist	TLDRAM.h	/^        int dist;$/;"	m	struct:ramulator::TLDRAM::TimingEntry
dist	WideIO.h	/^        int dist;$/;"	m	struct:ramulator::WideIO::TimingEntry
dist	WideIO2.h	/^        int dist;$/;"	m	struct:ramulator::WideIO2::TimingEntry
dq	ALDRAM.h	/^        int dq;$/;"	m	struct:ramulator::ALDRAM::OrgEntry
dq	DDR3.h	/^        int dq;$/;"	m	struct:ramulator::DDR3::OrgEntry
dq	DDR4.h	/^        int dq;$/;"	m	struct:ramulator::DDR4::OrgEntry
dq	DSARP.h	/^        int dq;$/;"	m	struct:ramulator::DSARP::OrgEntry
dq	GDDR5.h	/^        int dq;$/;"	m	struct:ramulator::GDDR5::OrgEntry
dq	HBM.h	/^        int dq;$/;"	m	struct:ramulator::HBM::OrgEntry
dq	LPDDR3.h	/^        int dq;$/;"	m	struct:ramulator::LPDDR3::OrgEntry
dq	LPDDR4.h	/^        int dq;$/;"	m	struct:ramulator::LPDDR4::OrgEntry
dq	SALP.h	/^        int dq;$/;"	m	struct:ramulator::SALP::OrgEntry
dq	TLDRAM.h	/^        int dq;$/;"	m	struct:ramulator::TLDRAM::OrgEntry
dq	WideIO.h	/^        int dq;$/;"	m	struct:ramulator::WideIO::OrgEntry
dq	WideIO2.h	/^        int dq;$/;"	m	struct:ramulator::WideIO2::OrgEntry
dram_capacity	Memory.h	/^  ScalarStat dram_capacity;$/;"	m	class:ramulator::Memory
dumpDepth	MemWrapper.cpp	/^void MemWrapper::dumpDepth(const std::string &fname){$/;"	f	class:MemWrapper
early_exit	Processor.h	/^    bool early_exit;$/;"	m	class:ramulator::Processor
early_inject_refresh	Refresh.cpp	/^void Refresh<DSARP>::early_inject_refresh() {$/;"	f	class:ramulator::Refresh
edgeNum	common.cpp	/^int GL::edgeNum = 0;$/;"	m	class:GL	file:
edgeNum	common.h	/^        static int edgeNum;$/;"	m	class:GL
edge_num	graph.h	/^        int edge_num;$/;"	m	class:Graph
end_of_refreshing	DRAM.h	/^    long end_of_refreshing = -1;$/;"	m	class:ramulator::DRAM
end_of_serving	DRAM.h	/^    long end_of_serving = -1;$/;"	m	class:ramulator::DRAM
enqueue	Controller.h	/^    bool enqueue(Request& req)$/;"	f	class:ramulator::Controller
enqueue	SpeedyController.h	/^    bool enqueue(Request& req)$/;"	f	class:ramulator::SpeedyController
eps	StatType.h	/^const double eps = 1e-8;$/;"	m	namespace:Stats
evict	Cache.cpp	/^void Cache::evict(std::list<Line>* lines,$/;"	f	class:ramulator::Cache
evictline	Cache.cpp	/^void Cache::evictline(long addr, bool dirty) {$/;"	f	class:ramulator::Cache
exapndRpaiReadBuffer	pe.h	/^        std::list<int> exapndRpaiReadBuffer; $/;"	m	class:pe
expandCiaiReadBuffer	pe.h	/^        std::list<int> expandCiaiReadBuffer;  $/;"	m	class:pe
expandCiaoReadBuffer	pe.h	/^        std::list<int> expandCiaoReadBuffer;$/;"	m	class:pe
expandDepthAnalysis	pe.cpp	/^void pe::expandDepthAnalysis(){$/;"	f	class:pe
expandDepthReadBuffer	pe.h	/^        std::list<char> expandDepthReadBuffer;$/;"	m	class:pe
expandDepthWriteBuffer	pe.h	/^        std::list<char> expandDepthWriteBuffer;$/;"	m	class:pe
expandRpaoReadBuffer	pe.h	/^        std::list<int> expandRpaoReadBuffer;$/;"	m	class:pe
expandVidxForDepthWriteBuffer	pe.h	/^        std::list<int> expandVidxForDepthWriteBuffer;$/;"	m	class:pe
expected_limit_insts	Config.h	/^    long expected_limit_insts = 0;$/;"	m	class:ramulator::Config
expected_limit_insts	Processor.h	/^    long expected_limit_insts;$/;"	m	class:ramulator::Core
extend_channel_width	MemoryFactory.h	/^    static void extend_channel_width(T* spec, int cacheline)$/;"	f	class:ramulator::MemoryFactory
file	Processor.h	/^    std::ifstream file;$/;"	m	class:ramulator::Trace
files	MemWrapper.h	/^        std::vector<const char*> files;$/;"	m	class:MemWrapper
finish	Controller.h	/^    void finish(long read_req, long dram_cycles) {$/;"	f	class:ramulator::Controller
finish	DRAM.h	/^void DRAM<T>::finish(long dram_cycles) {$/;"	f	class:ramulator::DRAM
finish	Gem5Wrapper.cpp	/^void Gem5Wrapper::finish(void) {$/;"	f	class:Gem5Wrapper
finish	Memory.h	/^    void finish(void) {$/;"	f	class:ramulator::Memory
finish	SpeedyController.h	/^    void finish(int read_req, int write_req, int dram_cycles) {$/;"	f	class:ramulator::SpeedyController
finished	Processor.cpp	/^bool Core::finished()$/;"	f	class:Core
finished	Processor.cpp	/^bool Processor::finished() {$/;"	f	class:Processor
first_level	Cache.h	/^  Cache::Level first_level;$/;"	m	class:ramulator::CacheSystem
flags	StatType.h	/^  Derived &flags(Flags __flags) {$/;"	f	class:Stats::Stat
flags	StatType.h	/^  uint16_t flags;$/;"	m	class:Stats::Flags
flags	Statistics.h	/^    StatBase<StatType> & flags(Stats::Flags _flags) {$/;"	f	class:ramulator::StatBase
free_physical_pages	Memory.h	/^    vector<int> free_physical_pages;$/;"	m	class:ramulator::Memory
free_physical_pages_remaining	Memory.h	/^    long free_physical_pages_remaining;$/;"	m	class:ramulator::Memory
freq	ALDRAM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
freq	DDR3.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DDR3::SpeedEntry
freq	DDR4.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DDR4::SpeedEntry
freq	DSARP.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DSARP::SpeedEntry
freq	GDDR5.h	/^        double freq, tCK;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
freq	HBM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::HBM::SpeedEntry
freq	LPDDR3.h	/^        double freq, tCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
freq	LPDDR4.h	/^        double freq, tCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
freq	SALP.h	/^        double freq, tCK;$/;"	m	struct:ramulator::SALP::SpeedEntry
freq	TLDRAM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
freq	WideIO.h	/^        double freq, tCK;$/;"	m	struct:ramulator::WideIO::SpeedEntry
freq	WideIO2.h	/^        double freq, tCK;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
frontierAnalysis	pe.cpp	/^void pe::frontierAnalysis(){$/;"	f	class:pe
frontierBufferDepth	common.cpp	/^int GL::frontierBufferDepth = 4096;$/;"	m	class:GL	file:
frontierBufferDepth	common.h	/^        static int frontierBufferDepth;$/;"	m	class:GL
frontierMemAddr	common.cpp	/^long GL::frontierMemAddr = 0;$/;"	m	class:GL	file:
frontierMemAddr	common.h	/^        static long frontierMemAddr;$/;"	m	class:GL
frontierSize	pe.h	/^        int frontierSize;$/;"	m	class:pe
getAlignedAddr	common.cpp	/^long BurstOp::getAlignedAddr() const {$/;"	f	class:BurstOp
getArriveMemTime	common.cpp	/^long BurstOp::getArriveMemTime() const{$/;"	f	class:BurstOp
getArrivePeTime	common.cpp	/^long BurstOp::getArrivePeTime() const{$/;"	f	class:BurstOp
getBurstAddrWidth	common.cpp	/^int GL::getBurstAddrWidth(){$/;"	f	class:GL
getBurstIdx	common.cpp	/^long GL::getBurstIdx(){$/;"	f	class:GL
getBurstReq	MemWrapper.cpp	/^void MemWrapper::getBurstReq(){$/;"	f	class:MemWrapper
getDepartMemTime	common.cpp	/^long BurstOp::getDepartMemTime() const{$/;"	f	class:BurstOp
getDepartPeTime	common.cpp	/^long BurstOp::getDepartPeTime() const{$/;"	f	class:BurstOp
getMaxDepartTime	MemWrapper.cpp	/^long MemWrapper::getMaxDepartTime(const std::vector<long> &reqVec){$/;"	f	class:MemWrapper
getMaxIdx	graph.cpp	/^int Graph::getMaxIdx(const std::vector<std::vector<int>> &data){$/;"	f	class:Graph
getMemReq	MemWrapper.cpp	/^bool MemWrapper::getMemReq(Request &req){$/;"	f	class:MemWrapper
getMemResp	pe.cpp	/^void pe::getMemResp(){$/;"	f	class:pe
getMinArriveTime	MemWrapper.cpp	/^long MemWrapper::getMinArriveTime(const std::vector<long> &reqVec){$/;"	f	class:MemWrapper
getMinIdx	graph.cpp	/^int Graph::getMinIdx(const std::vector<std::vector<int>> &data){$/;"	f	class:Graph
getOffset	common.cpp	/^int BurstOp::getOffset() const {$/;"	f	class:BurstOp
getRandomStartIndices	graph.cpp	/^void Graph::getRandomStartIndices(std::vector<int> &start_indices){$/;"	f	class:Graph
getReadyOp	pe.cpp	/^bool pe::getReadyOp(BurstOp &op){$/;"	f	class:pe
getReqIdx	common.cpp	/^long GL::getReqIdx(){$/;"	f	class:GL
getReqNum	common.cpp	/^int BurstOp::getReqNum() const {$/;"	f	class:BurstOp
getSingleDataFromRam	MemWrapper.h	/^        T getSingleDataFromRam(long addr){$/;"	f	class:MemWrapper
getStat	graph.cpp	/^void Graph::getStat(){$/;"	f	class:Graph
get_addr_vec	Controller.cpp	/^vector<int> Controller<SALP>::get_addr_vec(SALP::Command cmd, list<Request>::iterator req){$/;"	f	class:ramulator::Controller
get_addr_vec	Controller.h	/^    vector<int> get_addr_vec(typename T::Command cmd, list<Request>::iterator req){$/;"	f	class:ramulator::Controller
get_channels	Config.h	/^    int get_channels() const {return channels;}$/;"	f	class:ramulator::Config
get_core_num	Config.h	/^    int get_core_num() const {return core_num;}$/;"	f	class:ramulator::Config
get_cpu_tick	Config.h	/^    int get_cpu_tick() const {return cpu_tick;}$/;"	f	class:ramulator::Config
get_dramtrace_request	Processor.cpp	/^bool Trace::get_dramtrace_request(long& req_addr, Request::Type& req_type)$/;"	f	class:Trace
get_expected_limit_insts	Config.h	/^    long get_expected_limit_insts() const {return expected_limit_insts;}$/;"	f	class:ramulator::Config
get_filtered_request	Processor.cpp	/^bool Trace::get_filtered_request(long& bubble_cnt, long& req_addr, Request::Type& req_type)$/;"	f	class:Trace
get_first_cmd	Controller.h	/^    typename T::Command get_first_cmd(list<Request>::iterator req)$/;"	f	class:ramulator::Controller
get_first_cmd	SpeedyController.h	/^    typename T::Command get_first_cmd(Request& req)$/;"	f	class:ramulator::SpeedyController
get_head	Scheduler.h	/^    list<Request>::iterator get_head(list<Request>& q)$/;"	f	class:ramulator::Scheduler
get_hits	Scheduler.h	/^    int get_hits(vector<int>& addr_vec)$/;"	f	class:ramulator::RowTable
get_index	Cache.h	/^  int get_index(long addr) {$/;"	f	class:ramulator::Cache
get_lines	Cache.h	/^  std::list<Line>& get_lines(long addr) {$/;"	f	class:ramulator::Cache
get_mem_tick	Config.h	/^    int get_mem_tick() const {return mem_tick;}$/;"	f	class:ramulator::Config
get_next	DRAM.h	/^long DRAM<T>::get_next(typename T::Command cmd, const int* addr)$/;"	f	class:ramulator::DRAM
get_offending_subarray	Controller.cpp	/^static vector<int> get_offending_subarray(DRAM<SALP>* channel, vector<int> & addr_vec){$/;"	f	namespace:ramulator
get_queue	Controller.h	/^    Queue& get_queue(Request::Type type)$/;"	f	class:ramulator::Controller
get_ranks	Config.h	/^    int get_ranks() const {return ranks;}$/;"	f	class:ramulator::Config
get_stat	Statistics.h	/^    const StatType* get_stat() const {$/;"	f	class:ramulator::StatBase
get_subarrays	Config.h	/^    int get_subarrays() const {return subarrays;}$/;"	f	class:ramulator::Config
get_tag	Cache.h	/^  long get_tag(long addr) {$/;"	f	class:ramulator::Cache
get_unfiltered_request	Processor.cpp	/^bool Trace::get_unfiltered_request(long& bubble_cnt, long& req_addr, Request::Type& req_type)$/;"	f	class:Trace
get_victim	Scheduler.h	/^    vector<int> get_victim(typename T::Command cmd)$/;"	f	class:ramulator::RowPolicy
grow_convert	StatType.cpp	/^Histogram::grow_convert()$/;"	f	class:Stats::Histogram
grow_out	StatType.cpp	/^Histogram::grow_out()$/;"	f	class:Stats::Histogram
grow_up	StatType.cpp	/^Histogram::grow_up()$/;"	f	class:Stats::Histogram
has_core_caches	Config.h	/^    bool has_core_caches() const {$/;"	f	class:ramulator::Config
has_l3_cache	Config.h	/^    bool has_l3_cache() const {$/;"	f	class:ramulator::Config
has_reached_limit	Processor.cpp	/^bool Core::has_reached_limit() {$/;"	f	class:Core
has_reached_limit	Processor.cpp	/^bool Processor::has_reached_limit() {$/;"	f	class:Processor
head	Processor.h	/^    int head = 0;$/;"	m	class:ramulator::Window
higher_cache	Cache.h	/^  std::vector<Cache*> higher_cache;$/;"	m	class:ramulator::Cache
hit_list	Cache.h	/^  std::list<std::pair<long, Request> > hit_list;$/;"	m	class:ramulator::CacheSystem
hit_mshr	Cache.h	/^  hit_mshr(long addr) {$/;"	f	class:ramulator::Cache
hits	Scheduler.h	/^        int hits;$/;"	m	struct:ramulator::RowTable::Entry
hubVertexThreshold	common.cpp	/^int GL::hubVertexThreshold = 0;$/;"	m	class:GL	file:
hubVertexThreshold	common.h	/^        static int hubVertexThreshold;$/;"	m	class:GL
id	DRAM.h	/^    int id;$/;"	m	class:ramulator::DRAM
id	Processor.h	/^    int id = 0;$/;"	m	class:ramulator::Core
idx	graph.h	/^        int idx;$/;"	m	class:Vertex
in_deg	graph.h	/^        int in_deg;$/;"	m	class:Vertex
in_queue_read_req_num_avg	Memory.h	/^  ScalarStat in_queue_read_req_num_avg;$/;"	m	class:ramulator::Memory
in_queue_read_req_num_sum	Memory.h	/^  ScalarStat in_queue_read_req_num_sum;$/;"	m	class:ramulator::Memory
in_queue_req_num_avg	Memory.h	/^  ScalarStat in_queue_req_num_avg;$/;"	m	class:ramulator::Memory
in_queue_req_num_sum	Memory.h	/^  ScalarStat in_queue_req_num_sum;$/;"	m	class:ramulator::Memory
in_queue_write_req_num_avg	Memory.h	/^  ScalarStat in_queue_write_req_num_avg;$/;"	m	class:ramulator::Memory
in_queue_write_req_num_sum	Memory.h	/^  ScalarStat in_queue_write_req_num_sum;$/;"	m	class:ramulator::Memory
in_vids	graph.h	/^        std::vector<int> in_vids;$/;"	m	class:Vertex
inc	StatType.h	/^  void inc(Counter val) {$/;"	f	class:Stats::Average
incoming_read_reqs_per_channel	Memory.h	/^  VectorStat incoming_read_reqs_per_channel;$/;"	m	class:ramulator::Memory
incoming_requests_per_channel	Memory.h	/^  VectorStat incoming_requests_per_channel;$/;"	m	class:ramulator::Memory
index_mask	Cache.h	/^  unsigned int index_mask;$/;"	m	class:ramulator::Cache
index_offset	Cache.h	/^  unsigned int index_offset;$/;"	m	class:ramulator::Cache
init	StatType.h	/^  void init(Counter min, Counter max, Counter bkt) {$/;"	f	class:Stats::Distribution
init	StatType.h	/^  void init(size_type __buckets) {$/;"	f	class:Stats::Histogram
init	StatType.h	/^  void init(size_type __size) {$/;"	f	class:Stats::VectorBase
init	StatType.h	/^const uint16_t init      = 0x00000001;$/;"	m	namespace:Stats
init	Statistics.h	/^    DistributionStat & init(Stats::Counter min, Stats::Counter max, Stats::Counter bkt) {$/;"	f	class:ramulator::DistributionStat
init	Statistics.h	/^    HistogramStat & init(Stats::size_type size) {$/;"	f	class:ramulator::HistogramStat
init	Statistics.h	/^    VectorStatBase<StatType, Element> & init(Stats::size_type size) {$/;"	f	class:ramulator::VectorStatBase
init	pe.cpp	/^void pe::init(){$/;"	f	class:pe
init_lambda	ALDRAM.cpp	/^void ALDRAM::init_lambda()$/;"	f	class:ALDRAM
init_lambda	DDR3.cpp	/^void DDR3::init_lambda()$/;"	f	class:DDR3
init_lambda	DDR4.cpp	/^void DDR4::init_lambda()$/;"	f	class:DDR4
init_lambda	DSARP.cpp	/^void DSARP::init_lambda()$/;"	f	class:DSARP
init_lambda	GDDR5.cpp	/^void GDDR5::init_lambda()$/;"	f	class:GDDR5
init_lambda	HBM.cpp	/^void HBM::init_lambda()$/;"	f	class:HBM
init_lambda	LPDDR3.cpp	/^void LPDDR3::init_lambda()$/;"	f	class:LPDDR3
init_lambda	LPDDR4.cpp	/^void LPDDR4::init_lambda()$/;"	f	class:LPDDR4
init_lambda	SALP.cpp	/^void SALP::init_lambda()$/;"	f	class:SALP
init_lambda	TLDRAM.cpp	/^void TLDRAM::init_lambda()$/;"	f	class:TLDRAM
init_lambda	WideIO.cpp	/^void WideIO::init_lambda()$/;"	f	class:WideIO
init_lambda	WideIO2.cpp	/^void WideIO2::init_lambda()$/;"	f	class:WideIO2
init_prereq	ALDRAM.cpp	/^void ALDRAM::init_prereq()$/;"	f	class:ALDRAM
init_prereq	DDR3.cpp	/^void DDR3::init_prereq()$/;"	f	class:DDR3
init_prereq	DDR4.cpp	/^void DDR4::init_prereq()$/;"	f	class:DDR4
init_prereq	DSARP.cpp	/^void DSARP::init_prereq()$/;"	f	class:DSARP
init_prereq	GDDR5.cpp	/^void GDDR5::init_prereq()$/;"	f	class:GDDR5
init_prereq	HBM.cpp	/^void HBM::init_prereq()$/;"	f	class:HBM
init_prereq	LPDDR3.cpp	/^void LPDDR3::init_prereq()$/;"	f	class:LPDDR3
init_prereq	LPDDR4.cpp	/^void LPDDR4::init_prereq()$/;"	f	class:LPDDR4
init_prereq	SALP.cpp	/^void SALP::init_prereq()$/;"	f	class:SALP
init_prereq	TLDRAM.cpp	/^void TLDRAM::init_prereq()$/;"	f	class:TLDRAM
init_prereq	WideIO.cpp	/^void WideIO::init_prereq()$/;"	f	class:WideIO
init_prereq	WideIO2.cpp	/^void WideIO2::init_prereq()$/;"	f	class:WideIO2
init_rowhit	ALDRAM.cpp	/^void ALDRAM::init_rowhit()$/;"	f	class:ALDRAM
init_rowhit	DDR3.cpp	/^void DDR3::init_rowhit()$/;"	f	class:DDR3
init_rowhit	DDR4.cpp	/^void DDR4::init_rowhit()$/;"	f	class:DDR4
init_rowhit	DSARP.cpp	/^void DSARP::init_rowhit()$/;"	f	class:DSARP
init_rowhit	GDDR5.cpp	/^void GDDR5::init_rowhit()$/;"	f	class:GDDR5
init_rowhit	HBM.cpp	/^void HBM::init_rowhit()$/;"	f	class:HBM
init_rowhit	LPDDR3.cpp	/^void LPDDR3::init_rowhit()$/;"	f	class:LPDDR3
init_rowhit	LPDDR4.cpp	/^void LPDDR4::init_rowhit()$/;"	f	class:LPDDR4
init_rowhit	SALP.cpp	/^void SALP::init_rowhit()$/;"	f	class:SALP
init_rowhit	TLDRAM.cpp	/^void TLDRAM::init_rowhit()$/;"	f	class:TLDRAM
init_rowhit	WideIO.cpp	/^void WideIO::init_rowhit()$/;"	f	class:WideIO
init_rowhit	WideIO2.cpp	/^void WideIO2::init_rowhit()$/;"	f	class:WideIO2
init_rowopen	DDR3.cpp	/^void DDR3::init_rowopen()$/;"	f	class:DDR3
init_rowopen	DDR4.cpp	/^void DDR4::init_rowopen()$/;"	f	class:DDR4
init_rowopen	DSARP.cpp	/^void DSARP::init_rowopen()$/;"	f	class:DSARP
init_rowopen	GDDR5.cpp	/^void GDDR5::init_rowopen()$/;"	f	class:GDDR5
init_rowopen	HBM.cpp	/^void HBM::init_rowopen()$/;"	f	class:HBM
init_rowopen	LPDDR3.cpp	/^void LPDDR3::init_rowopen()$/;"	f	class:LPDDR3
init_rowopen	LPDDR4.cpp	/^void LPDDR4::init_rowopen()$/;"	f	class:LPDDR4
init_rowopen	SALP.cpp	/^void SALP::init_rowopen()$/;"	f	class:SALP
init_rowopen	TLDRAM.cpp	/^void TLDRAM::init_rowopen()$/;"	f	class:TLDRAM
init_rowopen	WideIO.cpp	/^void WideIO::init_rowopen()$/;"	f	class:WideIO
init_rowopen	WideIO2.cpp	/^void WideIO2::init_rowopen()$/;"	f	class:WideIO2
init_speed	ALDRAM.cpp	/^void ALDRAM::init_speed()$/;"	f	class:ALDRAM
init_speed	DDR3.cpp	/^void DDR3::init_speed()$/;"	f	class:DDR3
init_speed	DDR4.cpp	/^void DDR4::init_speed()$/;"	f	class:DDR4
init_speed	DSARP.cpp	/^void DSARP::init_speed()$/;"	f	class:DSARP
init_speed	GDDR5.cpp	/^void GDDR5::init_speed()$/;"	f	class:GDDR5
init_speed	HBM.cpp	/^void HBM::init_speed()$/;"	f	class:HBM
init_speed	LPDDR3.cpp	/^void LPDDR3::init_speed()$/;"	f	class:LPDDR3
init_speed	LPDDR4.cpp	/^void LPDDR4::init_speed()$/;"	f	class:LPDDR4
init_speed	SALP.cpp	/^void SALP::init_speed()$/;"	f	class:SALP
init_speed	TLDRAM.cpp	/^void TLDRAM::init_speed()$/;"	f	class:TLDRAM
init_speed	WideIO.cpp	/^void WideIO::init_speed()$/;"	f	class:WideIO
init_timing	ALDRAM.cpp	/^void ALDRAM::init_timing(SpeedEntry speed_entry)$/;"	f	class:ALDRAM
init_timing	DDR3.cpp	/^void DDR3::init_timing()$/;"	f	class:DDR3
init_timing	DDR4.cpp	/^void DDR4::init_timing()$/;"	f	class:DDR4
init_timing	DSARP.cpp	/^void DSARP::init_timing()$/;"	f	class:DSARP
init_timing	GDDR5.cpp	/^void GDDR5::init_timing()$/;"	f	class:GDDR5
init_timing	HBM.cpp	/^void HBM::init_timing()$/;"	f	class:HBM
init_timing	LPDDR3.cpp	/^void LPDDR3::init_timing()$/;"	f	class:LPDDR3
init_timing	LPDDR4.cpp	/^void LPDDR4::init_timing()$/;"	f	class:LPDDR4
init_timing	SALP.cpp	/^void SALP::init_timing()$/;"	f	class:SALP
init_timing	TLDRAM.cpp	/^void TLDRAM::init_timing()$/;"	f	class:TLDRAM
init_timing	WideIO.cpp	/^void WideIO::init_timing()$/;"	f	class:WideIO
init_timing	WideIO2.cpp	/^void WideIO2::init_timing()$/;"	f	class:WideIO2
inject_refresh	Refresh.cpp	/^void Refresh<DSARP>::inject_refresh(bool b_ref_rank) {$/;"	f	class:ramulator::Refresh
inject_refresh	Refresh.h	/^  void inject_refresh(bool b_ref_rank) {$/;"	f	class:ramulator::Refresh
insert	DRAM.h	/^void DRAM<T>::insert(DRAM<T>* child)$/;"	f	class:ramulator::DRAM
insert	Processor.cpp	/^void Window::insert(bool ready, long addr)$/;"	f	class:Window
inspectDepthAnalysis	pe.cpp	/^void pe::inspectDepthAnalysis(){$/;"	f	class:pe
inspectDepthReadBuffer	pe.h	/^        std::list<char> inspectDepthReadBuffer; $/;"	m	class:pe
inspectFrontierBuffer	pe.h	/^        std::list<int> inspectFrontierBuffer;$/;"	m	class:pe
invalidate	Cache.cpp	/^std::pair<long, bool> Cache::invalidate(long addr) {$/;"	f	class:ramulator::Cache
ipc	Processor.h	/^    double ipc = 0;$/;"	m	class:ramulator::Processor
ipc	Processor.h	/^    int ipc = 4;$/;"	m	class:ramulator::Window
ipcs	Processor.h	/^    std::vector<double> ipcs;$/;"	m	class:ramulator::Processor
isAllReqProcessed	pe.cpp	/^bool pe::isAllReqProcessed(){$/;"	f	class:pe
isBurstReqQueueEmpty	pe.cpp	/^bool pe::isBurstReqQueueEmpty(){$/;"	f	class:pe
isBurstRespQueueEmpty	pe.cpp	/^bool pe::isBurstRespQueueEmpty(){$/;"	f	class:pe
isEndOfBfsIteration	pe.cpp	/^bool pe::isEndOfBfsIteration(){$/;"	f	class:pe
isUgraph	graph.h	/^        bool isUgraph;$/;"	m	class:Graph
is_accessing	ALDRAM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:ramulator::ALDRAM
is_accessing	DDR3.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::DDR3
is_accessing	DDR4.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::DDR4
is_accessing	DSARP.h	/^    bool is_accessing(Command cmd)$/;"	f	class:ramulator::DSARP
is_accessing	GDDR5.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::GDDR5
is_accessing	HBM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:ramulator::HBM
is_accessing	LPDDR3.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::LPDDR3
is_accessing	LPDDR4.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::LPDDR4
is_accessing	SALP.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::SALP
is_accessing	TLDRAM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:ramulator::TLDRAM
is_accessing	WideIO.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::WideIO
is_accessing	WideIO2.h	/^    bool is_accessing(Command cmd) $/;"	f	class:ramulator::WideIO2
is_active	Controller.h	/^    bool is_active() {$/;"	f	class:ramulator::Controller
is_cdf	StatType.h	/^  bool is_cdf() const {return flags & cdf;}$/;"	f	class:Stats::Flags
is_closing	ALDRAM.h	/^    bool is_closing(Command cmd)$/;"	f	class:ramulator::ALDRAM
is_closing	DDR3.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::DDR3
is_closing	DDR4.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::DDR4
is_closing	DSARP.h	/^    bool is_closing(Command cmd)$/;"	f	class:ramulator::DSARP
is_closing	GDDR5.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::GDDR5
is_closing	HBM.h	/^    bool is_closing(Command cmd)$/;"	f	class:ramulator::HBM
is_closing	LPDDR3.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::LPDDR3
is_closing	LPDDR4.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::LPDDR4
is_closing	SALP.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::SALP
is_closing	TLDRAM.h	/^    bool is_closing(Command cmd)$/;"	f	class:ramulator::TLDRAM
is_closing	WideIO.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::WideIO
is_closing	WideIO2.h	/^    bool is_closing(Command cmd) $/;"	f	class:ramulator::WideIO2
is_display	StatType.h	/^  bool is_display() const {return flags & display;}$/;"	f	class:Stats::Flags
is_display	StatType.h	/^  virtual bool is_display() const {$/;"	f	class:Stats::Stat
is_early_exit	Config.h	/^    bool is_early_exit() const {$/;"	f	class:ramulator::Config
is_empty	Processor.cpp	/^bool Window::is_empty()$/;"	f	class:Window
is_first_command	Request.h	/^            bool is_first_command;$/;"	m	class:ramulator::Request
is_first_level	Cache.h	/^  bool is_first_level;$/;"	m	class:ramulator::Cache
is_full	Processor.cpp	/^bool Window::is_full()$/;"	f	class:Window
is_hit	Cache.cpp	/^bool Cache::is_hit(std::list<Line>& lines, long addr,$/;"	f	class:ramulator::Cache
is_last_level	Cache.h	/^  bool is_last_level;$/;"	m	class:ramulator::Cache
is_nonan	StatType.h	/^  bool is_nonan() const {return flags & nonan;}$/;"	f	class:Stats::Flags
is_nozero	StatType.h	/^  bool is_nozero() const {return flags & nozero;}$/;"	f	class:Stats::Flags
is_nozero	StatType.h	/^  virtual bool is_nozero() const {$/;"	f	class:Stats::Stat
is_opening	ALDRAM.h	/^    bool is_opening(Command cmd)$/;"	f	class:ramulator::ALDRAM
is_opening	DDR3.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::DDR3
is_opening	DDR4.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::DDR4
is_opening	DSARP.h	/^    bool is_opening(Command cmd)$/;"	f	class:ramulator::DSARP
is_opening	GDDR5.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::GDDR5
is_opening	HBM.h	/^    bool is_opening(Command cmd)$/;"	f	class:ramulator::HBM
is_opening	LPDDR3.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::LPDDR3
is_opening	LPDDR4.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::LPDDR4
is_opening	SALP.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::SALP
is_opening	TLDRAM.h	/^    bool is_opening(Command cmd)$/;"	f	class:ramulator::TLDRAM
is_opening	WideIO.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::WideIO
is_opening	WideIO2.h	/^    bool is_opening(Command cmd) $/;"	f	class:ramulator::WideIO2
is_pdf	StatType.h	/^  bool is_pdf() const {return flags & pdf;}$/;"	f	class:Stats::Flags
is_ready	Controller.cpp	/^bool Controller<SALP>::is_ready(list<Request>::iterator req){$/;"	f	class:ramulator::Controller
is_ready	Controller.h	/^    bool is_ready(list<Request>::iterator req)$/;"	f	class:ramulator::Controller
is_ready	Controller.h	/^    bool is_ready(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:ramulator::Controller
is_refresh	Controller.h	/^    bool is_refresh() {$/;"	f	class:ramulator::Controller
is_refreshing	ALDRAM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:ramulator::ALDRAM
is_refreshing	DDR3.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::DDR3
is_refreshing	DDR4.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::DDR4
is_refreshing	DSARP.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:ramulator::DSARP
is_refreshing	GDDR5.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::GDDR5
is_refreshing	HBM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:ramulator::HBM
is_refreshing	LPDDR3.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::LPDDR3
is_refreshing	LPDDR4.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::LPDDR4
is_refreshing	SALP.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::SALP
is_refreshing	TLDRAM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:ramulator::TLDRAM
is_refreshing	WideIO.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::WideIO
is_refreshing	WideIO2.h	/^    bool is_refreshing(Command cmd) $/;"	f	class:ramulator::WideIO2
is_row_hit	Controller.h	/^    bool is_row_hit(list<Request>::iterator req)$/;"	f	class:ramulator::Controller
is_row_hit	Controller.h	/^    bool is_row_hit(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:ramulator::Controller
is_row_hit	SpeedyController.h	/^    bool is_row_hit(Request& req)$/;"	f	class:ramulator::SpeedyController
is_row_open	Controller.h	/^    bool is_row_open(list<Request>::iterator req)$/;"	f	class:ramulator::Controller
is_row_open	Controller.h	/^    bool is_row_open(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:ramulator::Controller
is_total	StatType.h	/^  bool is_total() const {return flags & total;}$/;"	f	class:Stats::Flags
issueExpandCiaoReadReq	pe.cpp	/^void pe::issueExpandCiaoReadReq(){$/;"	f	class:pe
issueExpandDepthReadReq	pe.cpp	/^void pe::issueExpandDepthReadReq(){$/;"	f	class:pe
issueInspectDepthReadReq	pe.cpp	/^void pe::issueInspectDepthReadReq(){$/;"	f	class:pe
issue_cmd	Controller.h	/^    void issue_cmd(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:ramulator::Controller
issue_cmd	SpeedyController.h	/^    void issue_cmd(typename T::Command cmd, int* addr_vec)$/;"	f	class:ramulator::SpeedyController
l1_assoc	Processor.h	/^    int l1_assoc = 1 << 3;$/;"	m	class:ramulator::Core
l1_blocksz	Processor.h	/^    int l1_blocksz = 1 << 6;$/;"	m	class:ramulator::Core
l1_mshr_num	Processor.h	/^    int l1_mshr_num = 16;$/;"	m	class:ramulator::Core
l1_size	Processor.h	/^    int l1_size = 1 << 15;$/;"	m	class:ramulator::Core
l2_assoc	Processor.h	/^    int l2_assoc = 1 << 3;$/;"	m	class:ramulator::Core
l2_blocksz	Processor.h	/^    int l2_blocksz = 1 << 6;$/;"	m	class:ramulator::Core
l2_mshr_num	Processor.h	/^    int l2_mshr_num = 16;$/;"	m	class:ramulator::Core
l2_size	Processor.h	/^    int l2_size = 1 << 18;$/;"	m	class:ramulator::Core
l3_assoc	Processor.h	/^    int l3_assoc = 1 << 3;$/;"	m	class:ramulator::Processor
l3_blocksz	Processor.h	/^    int l3_blocksz = 1 << 6;$/;"	m	class:ramulator::Processor
l3_size	Processor.h	/^    int l3_size = 1 << 23;$/;"	m	class:ramulator::Processor
lambda	ALDRAM.h	/^    function<void(DRAM<ALDRAM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::ALDRAM
lambda	DDR3.h	/^    function<void(DRAM<DDR3>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR3
lambda	DDR4.h	/^    function<void(DRAM<DDR4>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR4
lambda	DRAM.h	/^    function<void(DRAM<T>*, int)>* lambda;$/;"	m	class:ramulator::DRAM
lambda	DSARP.h	/^    function<void(DRAM<DSARP>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DSARP
lambda	GDDR5.h	/^    function<void(DRAM<GDDR5>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::GDDR5
lambda	HBM.h	/^    function<void(DRAM<HBM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::HBM
lambda	LPDDR3.h	/^    function<void(DRAM<LPDDR3>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR3
lambda	LPDDR4.h	/^    function<void(DRAM<LPDDR4>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR4
lambda	SALP.h	/^    function<void(DRAM<SALP>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::SALP
lambda	TLDRAM.h	/^    function<void(DRAM<TLDRAM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::TLDRAM
lambda	WideIO.h	/^    function<void(DRAM<WideIO>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO
lambda	WideIO2.h	/^    function<void(DRAM<WideIO2>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO2
last	Processor.h	/^    long last = 0;$/;"	m	class:ramulator::Core
last	StatType.h	/^  Tick last;$/;"	m	class:Stats::Average
lastReset	StatType.h	/^  Tick lastReset;$/;"	m	class:Stats::Average
last_level	Cache.h	/^  Cache::Level last_level;$/;"	m	class:ramulator::CacheSystem
latency	Cache.h	/^  int latency[int(Level::MAX)] = {4, 4 + 12, 4 + 12 + 31};$/;"	m	class:ramulator::Cache
latency_each	Cache.h	/^  int latency_each[int(Level::MAX)] = {4, 12, 31};$/;"	m	class:ramulator::Cache
length	common.h	/^        int length;$/;"	m	struct:BurstOp
level	Cache.h	/^  } level;$/;"	m	class:ramulator::Cache	typeref:class:ramulator::Cache::Level
level	DRAM.h	/^    typename T::Level level;$/;"	m	class:ramulator::DRAM
level	pe.h	/^        char level;$/;"	m	class:pe
level_bank	Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:ramulator::Refresh
level_chan	Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:ramulator::Refresh
level_rank	Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:ramulator::Refresh
level_sa	Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:ramulator::Refresh
level_string	Cache.h	/^  std::string level_string;$/;"	m	class:ramulator::Cache
libramulator_is_present	MemoryFactory.cpp	/^    void libramulator_is_present(void)$/;"	f
list	StatType.h	/^  std::vector<StatBase*> list;$/;"	m	class:Stats::StatList
llc	Processor.h	/^    Cache llc;$/;"	m	class:ramulator::Processor
llc	Processor.h	/^    Cache* llc;$/;"	m	class:ramulator::Core
load	Processor.h	/^    int load = 0;$/;"	m	class:ramulator::Window
loadConfig	MemWrapper.cpp	/^void MemWrapper::loadConfig(int argc, char* argv[]){$/;"	f	class:MemWrapper
loadFile	graph.cpp	/^void Graph::loadFile($/;"	f	class:Graph
loadGraph	MemWrapper.cpp	/^Graph* MemWrapper::loadGraph(const std::string &cfgFileName){$/;"	f	class:MemWrapper
localCounter	pe.h	/^        int localCounter;$/;"	m	class:pe
lock	Cache.h	/^    bool lock; \/\/ When the lock is on, the value is not valid yet.$/;"	m	struct:ramulator::Cache::Line
logon	common.cpp	/^int GL::logon = 0;$/;"	m	class:GL	file:
logon	common.h	/^        static int logon;$/;"	m	class:GL
logs	StatType.h	/^  Counter logs;$/;"	m	class:Stats::Histogram
lower_cache	Cache.h	/^  Cache* lower_cache;$/;"	m	class:ramulator::Cache
lrand	Memory.h	/^    long lrand(void) {$/;"	f	class:ramulator::Memory
max	Controller.h	/^        unsigned int max = 32;$/;"	m	struct:ramulator::Controller::Queue
max_address	Memory.h	/^  long max_address;$/;"	m	class:ramulator::Memory
max_bank_count	Refresh.h	/^  int max_rank_count, max_bank_count;$/;"	m	class:ramulator::Refresh
max_bucket	StatType.h	/^  Counter max_bucket;$/;"	m	class:Stats::Histogram
max_rank_count	Refresh.h	/^  int max_rank_count, max_bank_count;$/;"	m	class:ramulator::Refresh
max_sa_count	Refresh.h	/^  int max_sa_count = 0;$/;"	m	class:ramulator::Refresh
max_track	StatType.h	/^  Counter max_track;$/;"	m	class:Stats::Distribution
max_val	StatType.h	/^  Counter max_val;$/;"	m	class:Stats::Distribution
maximum_bandwidth	Memory.h	/^  ScalarStat maximum_bandwidth;$/;"	m	class:ramulator::Memory
mem	Gem5Wrapper.h	/^    MemoryBase *mem;$/;"	m	class:ramulator::Gem5Wrapper
memClkCycle	MemWrapper.h	/^        double memClkCycle;$/;"	m	class:MemWrapper
memSize	MemWrapper.h	/^        int memSize;               \/\/ # of bytes$/;"	m	class:MemWrapper
mem_tick	Config.h	/^    int mem_tick;$/;"	m	class:ramulator::Config
memory	Processor.h	/^    MemoryBase& memory;$/;"	m	class:ramulator::Core
memory_access_cycles	Processor.h	/^    ScalarStat memory_access_cycles;$/;"	m	class:ramulator::Core
min_bucket	StatType.h	/^  Counter min_bucket;$/;"	m	class:Stats::Histogram
min_track	StatType.h	/^  Counter min_track;$/;"	m	class:Stats::Distribution
min_val	StatType.h	/^  Counter min_val;$/;"	m	class:Stats::Distribution
more_reqs	Processor.h	/^    bool more_reqs;$/;"	m	class:ramulator::Core
mshr_entries	Cache.h	/^  std::vector<std::pair<long, std::list<Line>::iterator>> mshr_entries;$/;"	m	class:ramulator::Cache
mshr_entry_num	Cache.h	/^  unsigned int mshr_entry_num;$/;"	m	class:ramulator::Cache
mshr_per_bank	Processor.h	/^    int mshr_per_bank = 16;$/;"	m	class:ramulator::Processor
n32AW	GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nBL	ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nBL	DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nBL	DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nBL	DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nBL	GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nBL	HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nBL	LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nBL	LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nBL	SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::SALP::SpeedEntry
nBL	TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nBL	WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nBL	WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nCCD	ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nCCD	DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nCCD	DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nCCD	LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nCCD	LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nCCD	SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::SALP::SpeedEntry
nCCD	TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nCCD	WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nCCD	WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nCCDL	DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nCCDL	GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nCCDL	HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nCCDS	DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nCCDS	GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nCCDS	HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nCKE	LPDDR3.h	/^        int nCKE, nXP; \/\/ CKE is PD, LPDDR3 has no DLL$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nCKE	LPDDR4.h	/^        int nCKE, nXP; \/\/ CKE value n\/a$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nCKE	WideIO.h	/^        int nCKE, nXP;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nCKE	WideIO2.h	/^        int nCKE, nXP;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nCKESR	ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nCKESR	DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nCKESR	DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:ramulator::DDR4::SpeedEntry
nCKESR	DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nCKESR	GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nCKESR	HBM.h	/^        int nCKESR, nXS;$/;"	m	struct:ramulator::HBM::SpeedEntry
nCKESR	LPDDR3.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFCab + 10ns$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nCKESR	SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nCKESR	TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nCKESR	WideIO.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFC+10$/;"	m	struct:ramulator::WideIO::SpeedEntry
nCKESR	WideIO2.h	/^        int nCKESR, nXSR;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nCL	ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nCL	DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nCL	DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nCL	DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nCL	GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nCL	HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nCL	LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nCL	LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nCL	SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:ramulator::SALP::SpeedEntry
nCL	TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nCL	WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nCL	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nCWL	ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nCWL	DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nCWL	DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nCWL	DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nCWL	GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nCWL	HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nCWL	LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nCWL	LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nCWL	SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:ramulator::SALP::SpeedEntry
nCWL	TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nCWL	WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nCWL	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nDQSCK	LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nDQSCK	LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nDQSCK	WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nDQSCK	WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nFAW	ALDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nFAW	DDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nFAW	DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nFAW	DSARP.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nFAW	GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nFAW	HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::HBM::SpeedEntry
nFAW	LPDDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nFAW	LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nFAW	SALP.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::SALP::SpeedEntry
nFAW	TLDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nFAW	WideIO2.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nLK	GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nPA	SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:ramulator::SALP::SpeedEntry
nPD	ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nPD	DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nPD	DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:ramulator::DDR4::SpeedEntry
nPD	DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nPD	GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nPD	HBM.h	/^        int nPD, nXP;$/;"	m	struct:ramulator::HBM::SpeedEntry
nPD	SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nPD	TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nPPD	GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nPPD	LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRA	SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:ramulator::SALP::SpeedEntry
nRAS	ALDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRAS	DDR3.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRAS	DDR4.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRAS	DSARP.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRAS	GDDR5.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRAS	HBM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRAS	LPDDR3.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRAS	LPDDR4.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRAS	SALP.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::SALP::SpeedEntry
nRAS	TLDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRAS	WideIO.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRAS	WideIO2.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRASF	TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRASM	TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRC	ALDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRC	DDR3.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRC	DDR4.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRC	DSARP.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRC	GDDR5.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRC	HBM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRC	LPDDR3.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRC	LPDDR4.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRC	SALP.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::SALP::SpeedEntry
nRC	TLDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRC	WideIO.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRC	WideIO2.h	/^        int nRAS, nRC;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRCD	ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRCD	DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRCD	DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRCD	DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRCD	LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRCD	LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRCD	SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:ramulator::SALP::SpeedEntry
nRCD	TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRCD	WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRCD	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRCDF	TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRCDM	TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRCDR	GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRCDR	HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRCDW	GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRCDW	HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRCF	TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRCM	TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nREFI	ALDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nREFI	DDR3.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nREFI	DDR4.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nREFI	DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nREFI	GDDR5.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nREFI	HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:ramulator::HBM::SpeedEntry
nREFI	LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nREFI	LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nREFI	SALP.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::SALP::SpeedEntry
nREFI	TLDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nREFI	WideIO.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nREFI	WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nREFI1B	HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:ramulator::HBM::SpeedEntry
nREFIpb	DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRFC	ALDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRFC	DDR3.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRFC	DDR4.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRFC	GDDR5.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRFC	HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRFC	SALP.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::SALP::SpeedEntry
nRFC	TLDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRFC	WideIO.h	/^        int nRFC, nREFI;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRFCab	DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRFCab	LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRFCab	LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRFCab	WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRFCpb	DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRFCpb	LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRFCpb	LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRFCpb	WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRP	ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRP	DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRP	DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRP	GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRP	HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRP	SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:ramulator::SALP::SpeedEntry
nRP	TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRP	WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRP8b	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRPF	TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRPM	TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRPab	DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRPab	LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRPab	LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRPab	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRPpb	DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRPpb	LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRPpb	LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRPpb	WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRRD	ALDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRRD	DDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRRD	DSARP.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRRD	GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRRD	LPDDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRRD	LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRRD	SALP.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::SALP::SpeedEntry
nRRD	TLDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRRD	WideIO.h	/^        int nRRD, nTAW;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRRD	WideIO2.h	/^        int nRRD, nFAW;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRRDL	DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRRDL	HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRRDS	DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRRDS	HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRRD_factor	DSARP.h	/^    double nRRD_factor = 1.138;$/;"	m	class:ramulator::DSARP
nRTP	ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRTP	DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRTP	DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRTP	DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRTP	GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nRTP	HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::HBM::SpeedEntry
nRTP	LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRTP	LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRTP	SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:ramulator::SALP::SpeedEntry
nRTP	TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRTP	WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nRTP	WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRTRS	ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nRTRS	DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nRTRS	DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nRTRS	DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nRTRS	LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nRTRS	LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nRTRS	SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::SALP::SpeedEntry
nRTRS	TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nRTRS	WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nRTW	WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nSCD	SALP.h	/^        int nSCD;$/;"	m	struct:ramulator::SALP::SpeedEntry
nSR	LPDDR4.h	/^        int nSR, nXSR; \/\/ tXSR = tRFCab + 7.5ns$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nTAW	WideIO.h	/^        int nRRD, nTAW;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nWA	SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:ramulator::SALP::SpeedEntry
nWR	ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nWR	DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nWR	DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nWR	DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nWR	GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nWR	HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::HBM::SpeedEntry
nWR	LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nWR	LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nWR	SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:ramulator::SALP::SpeedEntry
nWR	TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nWR	WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nWR	WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nWTR	ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nWTR	DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nWTR	DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nWTR	GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nWTR	LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nWTR	LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nWTR	SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:ramulator::SALP::SpeedEntry
nWTR	TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nWTR	WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nWTR	WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nWTRL	DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nWTRL	HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::HBM::SpeedEntry
nWTRS	DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::DDR4::SpeedEntry
nWTRS	HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:ramulator::HBM::SpeedEntry
nXP	ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nXP	DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nXP	DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:ramulator::DDR4::SpeedEntry
nXP	DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nXP	HBM.h	/^        int nPD, nXP;$/;"	m	struct:ramulator::HBM::SpeedEntry
nXP	LPDDR3.h	/^        int nCKE, nXP; \/\/ CKE is PD, LPDDR3 has no DLL$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nXP	LPDDR4.h	/^        int nCKE, nXP; \/\/ CKE value n\/a$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nXP	SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nXP	TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nXP	WideIO.h	/^        int nCKE, nXP;$/;"	m	struct:ramulator::WideIO::SpeedEntry
nXP	WideIO2.h	/^        int nCKE, nXP;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
nXPDLL	ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nXPDLL	DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nXPDLL	DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:ramulator::DDR4::SpeedEntry
nXPDLL	DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nXPDLL	SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nXPDLL	TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nXPN	GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nXS	ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nXS	DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nXS	DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:ramulator::DDR4::SpeedEntry
nXS	DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nXS	GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nXS	HBM.h	/^        int nCKESR, nXS;$/;"	m	struct:ramulator::HBM::SpeedEntry
nXS	SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nXS	TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nXSDLL	ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
nXSDLL	DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DDR3::SpeedEntry
nXSDLL	DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:ramulator::DDR4::SpeedEntry
nXSDLL	DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::DSARP::SpeedEntry
nXSDLL	GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
nXSDLL	SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::SALP::SpeedEntry
nXSDLL	TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
nXSR	LPDDR3.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFCab + 10ns$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
nXSR	LPDDR4.h	/^        int nSR, nXSR; \/\/ tXSR = tRFCab + 7.5ns$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
nXSR	WideIO.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFC+10$/;"	m	struct:ramulator::WideIO::SpeedEntry
nXSR	WideIO2.h	/^        int nCKESR, nXSR;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
n_sa	DSARP.h	/^    int n_sa;$/;"	m	class:ramulator::DSARP
n_sa	SALP.h	/^    int n_sa; \/\/ number of subarrays per bank$/;"	m	class:ramulator::SALP
name	MemWrapper.h	/^        std::string name;$/;"	m	class:MemWrapper
name	StatType.h	/^  Derived &name(const std::string &__name) {$/;"	f	class:Stats::Stat
name	Statistics.h	/^    StatBase<StatType> & name(std::string _name) {$/;"	f	class:ramulator::StatBase
name	Statistics.h	/^    const std::string &name(void) const { return statName; }$/;"	f	class:ramulator::StatBase
name_to_func	Gem5Wrapper.cpp	/^static map<string, function<MemoryBase *(const Config&, int)> > name_to_func = {$/;"	v	file:
name_to_translation	Memory.h	/^    std::map<string, Translation> name_to_translation = {$/;"	m	class:ramulator::Memory
need_eviction	Cache.cpp	/^bool Cache::need_eviction(const std::list<Line>& lines, long addr) {$/;"	f	class:ramulator::Cache
next	DRAM.h	/^    long next[int(T::Command::MAX)]; \/\/ the earliest time in the future when a command could be ready$/;"	m	class:ramulator::DRAM
no_core_caches	Processor.h	/^    bool no_core_caches = true;$/;"	m	class:ramulator::Core
no_core_caches	Processor.h	/^    bool no_core_caches = true;$/;"	m	class:ramulator::Processor
no_shared_cache	Processor.h	/^    bool no_shared_cache = true;$/;"	m	class:ramulator::Core
no_shared_cache	Processor.h	/^    bool no_shared_cache = true;$/;"	m	class:ramulator::Processor
nonan	StatType.h	/^const uint16_t nonan     = 0x00000200;$/;"	m	namespace:Stats
nozero	StatType.h	/^const uint16_t nozero    = 0x00000100;$/;"	m	namespace:Stats
num_dram_cycles	Memory.h	/^  ScalarStat num_dram_cycles;$/;"	m	class:ramulator::Memory
num_incoming_requests	Memory.h	/^  ScalarStat num_incoming_requests;$/;"	m	class:ramulator::Memory
num_read_requests	Memory.h	/^  VectorStat num_read_requests;$/;"	m	class:ramulator::Memory
num_write_requests	Memory.h	/^  VectorStat num_write_requests;$/;"	m	class:ramulator::Memory
off_type	StatType.h	/^typedef unsigned int off_type;$/;"	t	namespace:Stats
operator ()	SpeedyController.h	/^        bool operator()(const Request& lhs, const Request& rhs) {$/;"	f	class:ramulator::SpeedyController::compair_depart_clk
operator ()	StatType.h	/^  Result operator() (Result l, Result r) const {$/;"	f	class:Stats::Op
operator ()	StatType.h	/^  Result operator() (Result r) const {$/;"	f	class:Stats::Op
operator ++	StatType.h	/^  void operator ++ () { ++_value; }$/;"	f	class:Stats::ConstValue
operator ++	StatType.h	/^  void operator ++ () { ++_value; }$/;"	f	class:Stats::Scalar
operator ++	StatType.h	/^  void operator ++ () { inc(1); }$/;"	f	class:Stats::Average
operator ++	StatType.h	/^  void operator ++ (int) { _value++; }$/;"	f	class:Stats::ConstValue
operator ++	StatType.h	/^  void operator ++ (int) { _value++; }$/;"	f	class:Stats::Scalar
operator ++	StatType.h	/^  void operator ++ (int) { inc(1); }$/;"	f	class:Stats::Average
operator ++	Statistics.h	/^    void operator++() { ++StatBase<StatType>::stat; }$/;"	f	class:ramulator::ScalarStatBase
operator ++	Statistics.h	/^    void operator++(int) { StatBase<StatType>::stat++; }$/;"	f	class:ramulator::ScalarStatBase
operator +=	StatType.h	/^  void operator += (const U &v) { _value += v;}$/;"	f	class:Stats::ConstValue
operator +=	StatType.h	/^  void operator += (const U &v) { _value += v;}$/;"	f	class:Stats::Scalar
operator +=	StatType.h	/^  void operator += (const U &v) { inc(v);}$/;"	f	class:Stats::Average
operator +=	Statistics.h	/^    void operator+=(const U &v) { StatBase<StatType>::stat += v; }$/;"	f	class:ramulator::ScalarStatBase
operator --	StatType.h	/^  void operator -- () { --_value; }$/;"	f	class:Stats::ConstValue
operator --	StatType.h	/^  void operator -- () { --_value; }$/;"	f	class:Stats::Scalar
operator --	StatType.h	/^  void operator -- () { dec(1); }$/;"	f	class:Stats::Average
operator --	StatType.h	/^  void operator -- (int) { _value--; }$/;"	f	class:Stats::ConstValue
operator --	StatType.h	/^  void operator -- (int) { _value--; }$/;"	f	class:Stats::Scalar
operator --	StatType.h	/^  void operator -- (int) { dec(1); }$/;"	f	class:Stats::Average
operator --	Statistics.h	/^    void operator--() { --StatBase<StatType>::stat; }$/;"	f	class:ramulator::ScalarStatBase
operator --	Statistics.h	/^    void operator--(int) { StatBase<StatType>::stat--; }$/;"	f	class:ramulator::ScalarStatBase
operator -=	StatType.h	/^  void operator -= (const U &v) { _value -= v;}$/;"	f	class:Stats::ConstValue
operator -=	StatType.h	/^  void operator -= (const U &v) { _value -= v;}$/;"	f	class:Stats::Scalar
operator -=	StatType.h	/^  void operator -= (const U &v) { dec(v);}$/;"	f	class:Stats::Average
operator -=	Statistics.h	/^    void operator-=(const U &v) { StatBase<StatType>::stat -= v; }$/;"	f	class:ramulator::ScalarStatBase
operator <<	common.cpp	/^std::ostream& operator<< (std::ostream &os, const PortType &ptype){$/;"	f
operator <<	common.cpp	/^std::ostream& operator<< (std::ostream &os, const ramulator::Request::Type &type){$/;"	f
operator <<	common.cpp	/^std::ostream& operator<<(std::ostream &os, const BurstOp &op){$/;"	f
operator =	StatType.h	/^  void operator = (const U &v) { _value = v; }$/;"	f	class:Stats::ConstValue
operator =	StatType.h	/^  void operator = (const U &v) { _value = v; }$/;"	f	class:Stats::Scalar
operator =	StatType.h	/^  void operator = (const U &v) { set(v); }$/;"	f	class:Stats::Average
operator =	StatType.h	/^  void operator=(uint16_t _flags){flags = _flags;}$/;"	f	class:Stats::Flags
operator =	Statistics.h	/^    void operator=(const U &v) { StatBase<StatType>::stat = v; }$/;"	f	class:ramulator::ScalarStatBase
operator =	common.cpp	/^void BurstOp::operator=(const BurstOp &op){            $/;"	f	class:BurstOp
operator ==	common.cpp	/^bool BurstOp::operator==(const BurstOp &op) const{$/;"	f	class:BurstOp
operator []	Config.h	/^    std::string operator [] (const std::string& name) const {$/;"	f	class:ramulator::Config
operator []	StatType.h	/^  Element &operator[](off_type index) {$/;"	f	class:Stats::VectorBase
operator []	Statistics.h	/^    Element &operator[](Stats::off_type index) { return StatBase<StatType>::stat[index]; }$/;"	f	class:ramulator::VectorStatBase
operator []	Statistics.h	/^    Stats::ScalarProxy<StatType> operator[](Stats::off_type index) { return StatBase<StatType>::stat[index]; }$/;"	f	class:ramulator::VectorStatBase
opstring	StatType.h	/^  std::string opstring;$/;"	m	class:Stats::Op
options	Config.h	/^    std::map<std::string, std::string> options;$/;"	m	class:ramulator::Config
org_entry	ALDRAM.h	/^    }, org_entry;$/;"	m	class:ramulator::ALDRAM	typeref:struct:ramulator::ALDRAM::OrgEntry
org_entry	DDR3.h	/^    }, org_entry;$/;"	m	class:ramulator::DDR3	typeref:struct:ramulator::DDR3::OrgEntry
org_entry	DDR4.h	/^    }, org_entry;$/;"	m	class:ramulator::DDR4	typeref:struct:ramulator::DDR4::OrgEntry
org_entry	DSARP.h	/^    }, org_entry;$/;"	m	class:ramulator::DSARP	typeref:struct:ramulator::DSARP::OrgEntry
org_entry	GDDR5.h	/^    }, org_entry;$/;"	m	class:ramulator::GDDR5	typeref:struct:ramulator::GDDR5::OrgEntry
org_entry	HBM.h	/^    }, org_entry;$/;"	m	class:ramulator::HBM	typeref:struct:ramulator::HBM::OrgEntry
org_entry	LPDDR3.h	/^    }, org_entry;$/;"	m	class:ramulator::LPDDR3	typeref:struct:ramulator::LPDDR3::OrgEntry
org_entry	LPDDR4.h	/^    }, org_entry;$/;"	m	class:ramulator::LPDDR4	typeref:struct:ramulator::LPDDR4::OrgEntry
org_entry	SALP.h	/^    }, org_entry;$/;"	m	class:ramulator::SALP	typeref:struct:ramulator::SALP::OrgEntry
org_entry	TLDRAM.h	/^    }, org_entry;$/;"	m	class:ramulator::TLDRAM	typeref:struct:ramulator::TLDRAM::OrgEntry
org_entry	WideIO.h	/^    }, org_entry;$/;"	m	class:ramulator::WideIO	typeref:struct:ramulator::WideIO::OrgEntry
org_entry	WideIO2.h	/^    } org_entry;$/;"	m	class:ramulator::WideIO2	typeref:struct:ramulator::WideIO2::OrgEntry
org_map	ALDRAM.cpp	/^map<string, enum ALDRAM::Org> ALDRAM::org_map = {$/;"	m	class:ALDRAM	file:
org_map	ALDRAM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::ALDRAM
org_map	DDR3.cpp	/^map<string, enum DDR3::Org> DDR3::org_map = {$/;"	m	class:DDR3	file:
org_map	DDR3.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::DDR3
org_map	DDR4.cpp	/^map<string, enum DDR4::Org> DDR4::org_map = {$/;"	m	class:DDR4	file:
org_map	DDR4.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::DDR4
org_map	DSARP.cpp	/^map<string, enum DSARP::Org> DSARP::org_map = {$/;"	m	class:DSARP	file:
org_map	DSARP.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::DSARP
org_map	GDDR5.cpp	/^map<string, enum GDDR5::Org> GDDR5::org_map = {$/;"	m	class:GDDR5	file:
org_map	GDDR5.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::GDDR5
org_map	HBM.cpp	/^map<string, enum HBM::Org> HBM::org_map = {$/;"	m	class:HBM	file:
org_map	HBM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::HBM
org_map	LPDDR3.cpp	/^map<string, enum LPDDR3::Org> LPDDR3::org_map = {$/;"	m	class:LPDDR3	file:
org_map	LPDDR3.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::LPDDR3
org_map	LPDDR4.cpp	/^map<string, enum LPDDR4::Org> LPDDR4::org_map = {$/;"	m	class:LPDDR4	file:
org_map	LPDDR4.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::LPDDR4
org_map	SALP.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::SALP
org_map	TLDRAM.cpp	/^map<string, enum TLDRAM::Org> TLDRAM::org_map = {$/;"	m	class:TLDRAM	file:
org_map	TLDRAM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::TLDRAM
org_map	WideIO.cpp	/^map<string, enum WideIO::Org> WideIO::org_map = {$/;"	m	class:WideIO	file:
org_map	WideIO.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::WideIO
org_map	WideIO2.cpp	/^map<string, enum WideIO2::Org> WideIO2::org_map = {$/;"	m	class:WideIO2	file:
org_map	WideIO2.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ramulator::WideIO2
org_table	ALDRAM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::ALDRAM	typeref:struct:ramulator::ALDRAM::OrgEntry
org_table	DDR3.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::DDR3	typeref:struct:ramulator::DDR3::OrgEntry
org_table	DDR4.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::DDR4	typeref:struct:ramulator::DDR4::OrgEntry
org_table	DSARP.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::DSARP	typeref:struct:ramulator::DSARP::OrgEntry
org_table	GDDR5.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::GDDR5	typeref:struct:ramulator::GDDR5::OrgEntry
org_table	HBM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::HBM	typeref:struct:ramulator::HBM::OrgEntry
org_table	LPDDR3.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::LPDDR3	typeref:struct:ramulator::LPDDR3::OrgEntry
org_table	LPDDR4.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::LPDDR4	typeref:struct:ramulator::LPDDR4::OrgEntry
org_table	SALP.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::SALP	typeref:struct:ramulator::SALP::OrgEntry
org_table	TLDRAM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::TLDRAM	typeref:struct:ramulator::TLDRAM::OrgEntry
org_table	WideIO.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ramulator::WideIO	typeref:struct:ramulator::WideIO::OrgEntry
otherq	Controller.h	/^    Queue otherq;  \/\/ queue for all "other" requests (e.g., refresh)$/;"	m	class:ramulator::Controller
otherq	SpeedyController.h	/^    request_queue otherq;  \/\/ queue for all "other" requests (e.g., refresh)$/;"	m	class:ramulator::SpeedyController
out_deg	graph.h	/^        int out_deg;$/;"	m	class:Vertex
out_vids	graph.h	/^        std::vector<int> out_vids;$/;"	m	class:Vertex
output	StatType.h	/^  void output(std::string filename) {$/;"	f	class:Stats::StatList
overflow	StatType.h	/^  Counter overflow;$/;"	m	class:Stats::Distribution
page_allocator	Memory.h	/^    long page_allocator(long addr, int coreid) {$/;"	f	class:ramulator::Memory
page_translation	Memory.h	/^    map<pair<int, long>, long> page_translation;$/;"	m	class:ramulator::Memory
param_bucket_size	StatType.h	/^  Counter param_bucket_size;$/;"	m	class:Stats::Distribution
param_buckets	StatType.h	/^  Counter param_buckets;$/;"	m	class:Stats::Distribution
param_buckets	StatType.h	/^  size_type param_buckets;$/;"	m	class:Stats::Histogram
param_max	StatType.h	/^  Counter param_max;$/;"	m	class:Stats::Distribution
param_min	StatType.h	/^  Counter param_min;$/;"	m	class:Stats::Distribution
parent	DRAM.h	/^    DRAM* parent;$/;"	m	class:ramulator::DRAM
parse	Config.cpp	/^void Config::parse(const string& fname)$/;"	f	class:Config
pdf	StatType.h	/^const uint16_t pdf       = 0x00000020;$/;"	m	namespace:Stats
pe	pe.cpp	/^pe::pe($/;"	f	class:pe
pe	pe.h	/^class pe : public sc_module{$/;"	c
peClk	pe.h	/^        sc_in<bool> peClk;$/;"	m	class:pe
peClkCycle	MemWrapper.h	/^        double peClkCycle;$/;"	m	class:MemWrapper
peClkCycle	pe.h	/^        int peClkCycle;$/;"	m	class:pe
peIdx	Request.h	/^        int peIdx;$/;"	m	struct:ramulator::UDF
peIdx	common.h	/^        int peIdx;$/;"	m	struct:BurstOp
peIdx	pe.h	/^        int peIdx;$/;"	m	class:pe
pending	Controller.h	/^    deque<Request> pending;  \/\/ read requests that are about to receive data from DRAM$/;"	m	class:ramulator::Controller
pending	SpeedyController.h	/^    priority_queue<Request, vector<Request>, compair_depart_clk> pending;$/;"	m	class:ramulator::SpeedyController
pending_requests	Memory.h	/^    int pending_requests()$/;"	f	class:ramulator::Memory
physical_page_replacement	Memory.h	/^  ScalarStat physical_page_replacement;$/;"	m	class:ramulator::Memory
policy	Scheduler.h	/^    function<vector<int>(typename T::Command)> policy[int(Type::MAX)] = {$/;"	m	class:ramulator::RowPolicy
populate_memory	MemoryFactory.h	/^    static Memory<T> *populate_memory(const Config& configs, T *spec, int channels, int ranks) {$/;"	f	class:ramulator::MemoryFactory
precision	StatType.h	/^  Derived &precision(int __precision) {$/;"	f	class:Stats::Stat
precision	Statistics.h	/^    StatBase<StatType> & precision(int _precision) {$/;"	f	class:ramulator::StatBase
prefetch_size	ALDRAM.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ramulator::ALDRAM
prefetch_size	DDR3.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ramulator::DDR3
prefetch_size	DDR4.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ramulator::DDR4
prefetch_size	DSARP.h	/^    int prefetch_size = 16; \/\/ 16n prefetch DDR$/;"	m	class:ramulator::DSARP
prefetch_size	GDDR5.h	/^    int prefetch_size = 8; \/\/ 8n prefetch QDR$/;"	m	class:ramulator::GDDR5
prefetch_size	HBM.h	/^    int prefetch_size = 4; \/\/ burst length could be 2 and 4 (choose 4 here), 2n prefetch$/;"	m	class:ramulator::HBM
prefetch_size	LPDDR3.h	/^    int prefetch_size = 8; \/\/ 16n prefetch DDR$/;"	m	class:ramulator::LPDDR3
prefetch_size	LPDDR4.h	/^    int prefetch_size = 16; \/\/ 16n prefetch DDR$/;"	m	class:ramulator::LPDDR4
prefetch_size	SALP.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ramulator::SALP
prefetch_size	TLDRAM.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ramulator::TLDRAM
prefetch_size	WideIO.h	/^    int prefetch_size = 4; \/\/ 4n prefetch SDR$/;"	m	class:ramulator::WideIO
prefetch_size	WideIO2.h	/^    int prefetch_size = 4;$/;"	m	class:ramulator::WideIO2
prepare	StatType.h	/^  void prepare() {$/;"	f	class:Stats::Average
prepare	StatType.h	/^  void prepare() {$/;"	f	class:Stats::VectorBase
prepare	StatType.h	/^  void prepare() {}$/;"	f	class:Stats::AverageDeviation
prepare	StatType.h	/^  void prepare() {}$/;"	f	class:Stats::ConstValue
prepare	StatType.h	/^  void prepare() {}$/;"	f	class:Stats::Histogram
prepare	StatType.h	/^  void prepare() {}$/;"	f	class:Stats::Scalar
prepare	StatType.h	/^  void prepare() {}$/;"	f	class:Stats::StandardDeviation
prepare	StatType.h	/^  void prepare() {};$/;"	f	class:Stats::Distribution
prepare	Statistics.h	/^    void prepare(void) { stat.prepare(); }$/;"	f	class:ramulator::StatBase
prereq	ALDRAM.h	/^    function<Command(DRAM<ALDRAM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::ALDRAM
prereq	DDR3.h	/^    function<Command(DRAM<DDR3>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR3
prereq	DDR4.h	/^    function<Command(DRAM<DDR4>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR4
prereq	DRAM.h	/^    function<typename T::Command(DRAM<T>*, typename T::Command cmd, int)>* prereq;$/;"	m	class:ramulator::DRAM
prereq	DSARP.h	/^    function<Command(DRAM<DSARP>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DSARP
prereq	GDDR5.h	/^    function<Command(DRAM<GDDR5>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::GDDR5
prereq	HBM.h	/^    function<Command(DRAM<HBM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::HBM
prereq	LPDDR3.h	/^    function<Command(DRAM<LPDDR3>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR3
prereq	LPDDR4.h	/^    function<Command(DRAM<LPDDR4>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR4
prereq	SALP.h	/^    function<Command(DRAM<SALP>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::SALP
prereq	StatType.h	/^  Derived &prereq(const GenericStat & prereq) {$/;"	f	class:Stats::Stat
prereq	Statistics.h	/^    StatBase<StatType> & prereq(const Stat & _prereq) {$/;"	f	class:ramulator::StatBase
prereq	TLDRAM.h	/^    function<Command(DRAM<TLDRAM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::TLDRAM
prereq	WideIO.h	/^    function<Command(DRAM<WideIO>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO
prereq	WideIO2.h	/^    function<Command(DRAM<WideIO2>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO2
prev	DRAM.h	/^    deque<long> prev[int(T::Command::MAX)]; \/\/ the most recent history of when commands were issued$/;"	m	class:ramulator::DRAM
print	StatType.h	/^  virtual void print(std::ofstream& file) {$/;"	f	class:Stats::ScalarBase
print	StatType.h	/^  virtual void print(std::ofstream& file) {};$/;"	f	class:Stats::Stat
print	StatType.h	/^  void print(std::ofstream& file) {$/;"	f	class:Stats::VectorBase
printOngb	graph.cpp	/^void Graph::printOngb(int vidx){$/;"	f	class:Graph
print_cmd_trace	Config.h	/^    bool print_cmd_trace() const {$/;"	f	class:ramulator::Config
print_cmd_trace	Controller.h	/^    bool print_cmd_trace = false;$/;"	m	class:ramulator::Controller
print_cmd_trace	SpeedyController.h	/^    bool print_cmd_trace = false;$/;"	m	class:ramulator::SpeedyController
printall	StatType.h	/^  void printall() {$/;"	f	class:Stats::StatList
printdesc	StatType.h	/^  virtual void printdesc(std::ofstream& file) {$/;"	f	class:Stats::Stat
printname	StatType.h	/^  virtual void printname(std::ofstream& file) {$/;"	f	class:Stats::Stat
processExpandCiaoReadResp	pe.cpp	/^void pe::processExpandCiaoReadResp(){$/;"	f	class:pe
processExpandDepthReadResp	pe.cpp	/^void pe::processExpandDepthReadResp(){$/;"	f	class:pe
processExpandDepthWriteResp	pe.cpp	/^void pe::processExpandDepthWriteResp(){$/;"	f	class:pe
processExpandRpaoReadResp	pe.cpp	/^void pe::processExpandRpaoReadResp(){$/;"	f	class:pe
processInspectDepthReadResp	pe.cpp	/^void pe::processInspectDepthReadResp(){$/;"	f	class:pe
ptype	Request.h	/^        PortType ptype;$/;"	m	struct:ramulator::UDF
ptype	common.h	/^        PortType ptype;$/;"	m	struct:BurstOp
q	Controller.h	/^        list<Request> q;$/;"	m	struct:ramulator::Controller::Queue
queue_capacity	SpeedyController.h	/^    const unsigned int queue_capacity = 32;$/;"	m	class:ramulator::SpeedyController
ramData	MemWrapper.h	/^        std::vector<char> ramData; \/\/ byte level memory data management.$/;"	m	class:MemWrapper
ramInit	MemWrapper.cpp	/^void MemWrapper::ramInit(const std::string &cfgFileName){$/;"	f	class:MemWrapper
ramToReq	common.cpp	/^void BurstOp::ramToReq(const std::vector<char> &ramData){$/;"	f	class:BurstOp
ramulator	ALDRAM.h	/^namespace ramulator$/;"	n
ramulator	Cache.cpp	/^namespace ramulator$/;"	n	file:
ramulator	Cache.h	/^namespace ramulator$/;"	n
ramulator	Config.h	/^namespace ramulator$/;"	n
ramulator	Controller.cpp	/^namespace ramulator$/;"	n	file:
ramulator	Controller.h	/^namespace ramulator$/;"	n
ramulator	DDR3.h	/^namespace ramulator$/;"	n
ramulator	DDR4.h	/^namespace ramulator$/;"	n
ramulator	DRAM.h	/^namespace ramulator$/;"	n
ramulator	DSARP.h	/^namespace ramulator$/;"	n
ramulator	GDDR5.h	/^namespace ramulator$/;"	n
ramulator	Gem5Wrapper.h	/^namespace ramulator$/;"	n
ramulator	HBM.h	/^namespace ramulator$/;"	n
ramulator	LPDDR3.h	/^namespace ramulator$/;"	n
ramulator	LPDDR4.h	/^namespace ramulator$/;"	n
ramulator	Memory.h	/^namespace ramulator$/;"	n
ramulator	MemoryFactory.cpp	/^namespace ramulator$/;"	n	file:
ramulator	MemoryFactory.h	/^namespace ramulator$/;"	n
ramulator	Processor.h	/^namespace ramulator $/;"	n
ramulator	Refresh.cpp	/^namespace ramulator {$/;"	n	file:
ramulator	Refresh.h	/^namespace ramulator {$/;"	n
ramulator	Request.h	/^namespace ramulator$/;"	n
ramulator	SALP.h	/^namespace ramulator$/;"	n
ramulator	Scheduler.h	/^namespace ramulator$/;"	n
ramulator	SpeedyController.h	/^namespace ramulator$/;"	n
ramulator	StatType.h	/^namespace ramulator {$/;"	n
ramulator	Statistics.h	/^namespace ramulator {$/;"	n
ramulator	TLDRAM.h	/^namespace ramulator$/;"	n
ramulator	WideIO.h	/^namespace ramulator$/;"	n
ramulator	WideIO2.h	/^namespace ramulator$/;"	n
ramulator_active_cycles	Memory.h	/^  ScalarStat ramulator_active_cycles;$/;"	m	class:ramulator::Memory
ranks	Config.h	/^    int ranks;$/;"	m	class:ramulator::Config
rate	ALDRAM.h	/^        int rate;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
rate	DDR3.h	/^        int rate;$/;"	m	struct:ramulator::DDR3::SpeedEntry
rate	DDR4.h	/^        int rate;$/;"	m	struct:ramulator::DDR4::SpeedEntry
rate	DSARP.h	/^        int rate;$/;"	m	struct:ramulator::DSARP::SpeedEntry
rate	GDDR5.h	/^        int rate;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
rate	HBM.h	/^        int rate;$/;"	m	struct:ramulator::HBM::SpeedEntry
rate	LPDDR3.h	/^        int rate;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
rate	LPDDR4.h	/^        int rate;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
rate	SALP.h	/^        int rate;$/;"	m	struct:ramulator::SALP::SpeedEntry
rate	TLDRAM.h	/^        int rate;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
rate	WideIO.h	/^        int rate;$/;"	m	struct:ramulator::WideIO::SpeedEntry
rate	WideIO2.h	/^        int rate;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
reached_limit	Processor.h	/^    bool reached_limit = false;$/;"	m	class:ramulator::Core
read_latency	ALDRAM.h	/^    int read_latency;$/;"	m	class:ramulator::ALDRAM
read_latency	DDR3.h	/^    int read_latency;$/;"	m	class:ramulator::DDR3
read_latency	DDR4.h	/^    int read_latency;$/;"	m	class:ramulator::DDR4
read_latency	DSARP.h	/^    int read_latency;$/;"	m	class:ramulator::DSARP
read_latency	GDDR5.h	/^    int read_latency;$/;"	m	class:ramulator::GDDR5
read_latency	HBM.h	/^    int read_latency;$/;"	m	class:ramulator::HBM
read_latency	LPDDR3.h	/^    int read_latency;$/;"	m	class:ramulator::LPDDR3
read_latency	LPDDR4.h	/^    int read_latency;$/;"	m	class:ramulator::LPDDR4
read_latency	SALP.h	/^    int read_latency;$/;"	m	class:ramulator::SALP
read_latency	TLDRAM.h	/^    int read_latency;$/;"	m	class:ramulator::TLDRAM
read_latency	WideIO.h	/^    int read_latency;$/;"	m	class:ramulator::WideIO
read_latency	WideIO2.h	/^    int read_latency;$/;"	m	class:ramulator::WideIO2
read_latency_avg	Controller.h	/^    ScalarStat read_latency_avg;$/;"	m	class:ramulator::Controller
read_latency_sum	Controller.h	/^    ScalarStat read_latency_sum;$/;"	m	class:ramulator::Controller
read_req_queue_length_avg	Controller.h	/^    ScalarStat read_req_queue_length_avg;$/;"	m	class:ramulator::Controller
read_req_queue_length_sum	Controller.h	/^    ScalarStat read_req_queue_length_sum;$/;"	m	class:ramulator::Controller
read_row_conflicts	Controller.h	/^    VectorStat read_row_conflicts;$/;"	m	class:ramulator::Controller
read_row_hits	Controller.h	/^    VectorStat read_row_hits;$/;"	m	class:ramulator::Controller
read_row_misses	Controller.h	/^    VectorStat read_row_misses;$/;"	m	class:ramulator::Controller
read_transaction_bytes	Controller.h	/^    ScalarStat read_transaction_bytes;$/;"	m	class:ramulator::Controller
readq	Controller.h	/^    Queue readq;  \/\/ queue for read requests$/;"	m	class:ramulator::Controller
readq	SpeedyController.h	/^    request_queue readq;   \/\/ queue for read requests$/;"	m	class:ramulator::SpeedyController
ready_list	Processor.h	/^    std::vector<bool> ready_list;$/;"	m	class:ramulator::Window
receive	Processor.cpp	/^void Core::receive(Request& req)$/;"	f	class:Core
receive	Processor.cpp	/^void Processor::receive(Request& req) {$/;"	f	class:Processor
record_cmd_trace	Config.h	/^    bool record_cmd_trace() const {$/;"	f	class:ramulator::Config
record_cmd_trace	Controller.h	/^    bool record_cmd_trace = false;$/;"	m	class:ramulator::Controller
record_cmd_trace	SpeedyController.h	/^    bool record_cmd_trace = false;$/;"	m	class:ramulator::SpeedyController
record_core	Controller.h	/^    void record_core(int coreid) {$/;"	f	class:ramulator::Controller
record_core	Memory.h	/^    void record_core(int coreid) {$/;"	f	class:ramulator::Memory
record_cycs	Processor.h	/^    ScalarStat record_cycs;$/;"	m	class:ramulator::Core
record_insts	Processor.h	/^    ScalarStat record_insts;$/;"	m	class:ramulator::Core
record_read_conflicts	Controller.h	/^    VectorStat record_read_conflicts;$/;"	m	class:ramulator::Controller
record_read_hits	Controller.h	/^    VectorStat record_read_hits;$/;"	m	class:ramulator::Controller
record_read_misses	Controller.h	/^    VectorStat record_read_misses;$/;"	m	class:ramulator::Controller
record_read_requests	Memory.h	/^  VectorStat record_read_requests;$/;"	m	class:ramulator::Memory
record_write_conflicts	Controller.h	/^    VectorStat record_write_conflicts;$/;"	m	class:ramulator::Controller
record_write_hits	Controller.h	/^    VectorStat record_write_hits;$/;"	m	class:ramulator::Controller
record_write_misses	Controller.h	/^    VectorStat record_write_misses;$/;"	m	class:ramulator::Controller
record_write_requests	Memory.h	/^  VectorStat record_write_requests;$/;"	m	class:ramulator::Memory
refresh	Controller.h	/^    Refresh<T>* refresh;$/;"	m	class:ramulator::Controller
refresh_cycles	DRAM.h	/^    ScalarStat refresh_cycles;$/;"	m	class:ramulator::DRAM
refresh_intervals	DRAM.h	/^    std::vector<std::pair<long, long>> refresh_intervals;$/;"	m	class:ramulator::DRAM
refresh_mode	DDR4.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:ramulator::DDR4	typeref:class:ramulator::DDR4::RefreshMode
refresh_mode	DSARP.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:ramulator::DSARP	typeref:class:ramulator::DSARP::RefreshMode
refresh_mode	LPDDR4.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:ramulator::LPDDR4	typeref:class:ramulator::LPDDR4::RefreshMode
refresh_target	Refresh.h	/^  void refresh_target(Controller<T>* ctrl, int rank, int bank, int sa)$/;"	f	class:ramulator::Refresh
refreshed	Refresh.h	/^  long clk, refreshed;$/;"	m	class:ramulator::Refresh
refreshed	SpeedyController.h	/^    long refreshed = 0;  \/\/ last time refresh requests were generated$/;"	m	class:ramulator::SpeedyController
regStats	DRAM.h	/^void DRAM<T>::regStats(const std::string& identifier) {$/;"	f	class:ramulator::DRAM
reorderBuffer	pe.h	/^        std::list<BurstOp> reorderBuffer;$/;"	m	class:pe
reqIdx	Request.h	/^        long reqIdx; $/;"	m	struct:ramulator::UDF
reqIdx	common.cpp	/^long GL::reqIdx = -1;$/;"	m	class:GL	file:
reqIdx	common.h	/^        static long reqIdx;$/;"	m	class:GL
reqQueue	MemWrapper.h	/^        std::list<Request> reqQueue; $/;"	m	class:MemWrapper
reqStatus	MemWrapper.h	/^        std::map<long, bool> reqStatus;$/;"	m	class:MemWrapper
reqToRam	common.cpp	/^void BurstOp::reqToRam(std::vector<char> &ramData){ $/;"	f	class:BurstOp
reqVec	common.h	/^        std::vector<long> reqVec;$/;"	m	struct:BurstOp
req_addr	Processor.h	/^    long req_addr = -1;$/;"	m	class:ramulator::Core
req_queue_length_avg	Controller.h	/^    ScalarStat req_queue_length_avg;$/;"	m	class:ramulator::Controller
req_queue_length_sum	Controller.h	/^    ScalarStat req_queue_length_sum;$/;"	m	class:ramulator::Controller
req_type	Processor.h	/^    Request::Type req_type;$/;"	m	class:ramulator::Core
request_info	SpeedyController.h	/^    typedef tuple<Request, typename T::Command, long> request_info;$/;"	t	class:ramulator::SpeedyController
request_queue	SpeedyController.h	/^    typedef vector<request_info> request_queue;$/;"	t	class:ramulator::SpeedyController
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::Average
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::AverageDeviation
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::Distribution
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::Histogram
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::StandardDeviation
reset	StatType.h	/^  void reset() {$/;"	f	class:Stats::VectorBase
reset	StatType.h	/^  void reset() {_value = Counter();}$/;"	f	class:Stats::Scalar
reset	StatType.h	/^  void reset() {}$/;"	f	class:Stats::ConstValue
reset	Statistics.h	/^    void reset(void) { stat.reset(); }$/;"	f	class:ramulator::StatBase
respMonitor	MemWrapper.cpp	/^void MemWrapper::respMonitor(){$/;"	f	class:MemWrapper
respQueue	MemWrapper.h	/^        std::list<Request> respQueue;$/;"	m	class:MemWrapper
result	StatType.h	/^  Result result() const {$/;"	f	class:Stats::Average
result	StatType.h	/^  Result result() const {return (Result)_value;}$/;"	f	class:Stats::ConstValue
result	StatType.h	/^  Result result() const {return (Result)_value;}$/;"	f	class:Stats::Scalar
result	StatType.h	/^  void result(VResult& vec) const {$/;"	f	class:Stats::VectorBase
result	Statistics.h	/^    void result(Stats::VResult & vec) const { StatBase<StatType>::stat.result(vec); }$/;"	f	class:ramulator::VectorStatBase
retire	Processor.cpp	/^long Window::retire()$/;"	f	class:Window
retired	Processor.h	/^    long retired = 0;$/;"	m	class:ramulator::Core
row	Scheduler.h	/^        int row;$/;"	m	struct:ramulator::RowTable::Entry
row_conflicts	Controller.h	/^    ScalarStat row_conflicts;$/;"	m	class:ramulator::Controller
row_hits	Controller.h	/^    ScalarStat row_hits;$/;"	m	class:ramulator::Controller
row_hits	SpeedyController.h	/^  ScalarStat row_hits;$/;"	m	class:ramulator::SpeedyController
row_misses	Controller.h	/^    ScalarStat row_misses;$/;"	m	class:ramulator::Controller
row_misses	SpeedyController.h	/^  ScalarStat row_misses;$/;"	m	class:ramulator::SpeedyController
row_state	DRAM.h	/^    map<int, typename T::State> row_state;$/;"	m	class:ramulator::DRAM
rowhit	ALDRAM.h	/^    function<bool(DRAM<ALDRAM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::ALDRAM
rowhit	DDR3.h	/^    function<bool(DRAM<DDR3>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR3
rowhit	DDR4.h	/^    function<bool(DRAM<DDR4>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR4
rowhit	DRAM.h	/^    function<bool(DRAM<T>*, typename T::Command cmd, int)>* rowhit;$/;"	m	class:ramulator::DRAM
rowhit	DSARP.h	/^    function<bool(DRAM<DSARP>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DSARP
rowhit	GDDR5.h	/^    function<bool(DRAM<GDDR5>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::GDDR5
rowhit	HBM.h	/^    function<bool(DRAM<HBM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::HBM
rowhit	LPDDR3.h	/^    function<bool(DRAM<LPDDR3>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR3
rowhit	LPDDR4.h	/^    function<bool(DRAM<LPDDR4>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR4
rowhit	SALP.h	/^    function<bool(DRAM<SALP>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::SALP
rowhit	TLDRAM.h	/^    function<bool(DRAM<TLDRAM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::TLDRAM
rowhit	WideIO.h	/^    function<bool(DRAM<WideIO>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO
rowhit	WideIO2.h	/^    function<bool(DRAM<WideIO2>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO2
rowopen	ALDRAM.h	/^    function<bool(DRAM<ALDRAM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::ALDRAM
rowopen	DDR3.h	/^    function<bool(DRAM<DDR3>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR3
rowopen	DDR4.h	/^    function<bool(DRAM<DDR4>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR4
rowopen	DRAM.h	/^    function<bool(DRAM<T>*, typename T::Command cmd, int)>* rowopen;$/;"	m	class:ramulator::DRAM
rowopen	DSARP.h	/^    function<bool(DRAM<DSARP>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DSARP
rowopen	GDDR5.h	/^    function<bool(DRAM<GDDR5>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::GDDR5
rowopen	HBM.h	/^    function<bool(DRAM<HBM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::HBM
rowopen	LPDDR3.h	/^    function<bool(DRAM<LPDDR3>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR3
rowopen	LPDDR4.h	/^    function<bool(DRAM<LPDDR4>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR4
rowopen	SALP.h	/^    function<bool(DRAM<SALP>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::SALP
rowopen	TLDRAM.h	/^    function<bool(DRAM<TLDRAM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::TLDRAM
rowopen	WideIO.h	/^    function<bool(DRAM<WideIO>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO
rowopen	WideIO2.h	/^    function<bool(DRAM<WideIO2>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO2
rowpolicy	Controller.h	/^    RowPolicy<T>* rowpolicy;  \/\/ determines the row-policy (e.g., closed-row vs. open-row)$/;"	m	class:ramulator::Controller
rowtable	Controller.h	/^    RowTable<T>* rowtable;  \/\/ tracks metadata about rows (e.g., which are open and for how long)$/;"	m	class:ramulator::Controller
rpaiBufferDepth	common.cpp	/^int GL::rpaiBufferDepth = 4096;$/;"	m	class:GL	file:
rpaiBufferDepth	common.h	/^        static int rpaiBufferDepth;$/;"	m	class:GL
rpaiMemAddr	common.cpp	/^long GL::rpaiMemAddr = 0;$/;"	m	class:GL	file:
rpaiMemAddr	common.h	/^        static long rpaiMemAddr;$/;"	m	class:GL
rpaoBufferDepth	common.cpp	/^int GL::rpaoBufferDepth = 4096;$/;"	m	class:GL	file:
rpaoBufferDepth	common.h	/^        static int rpaoBufferDepth;$/;"	m	class:GL
rpaoMemAddr	common.cpp	/^long GL::rpaoMemAddr = 0;$/;"	m	class:GL	file:
rpaoMemAddr	common.h	/^        static long rpaoMemAddr;$/;"	m	class:GL
runMemSim	MemWrapper.cpp	/^void MemWrapper::runMemSim(){$/;"	f	class:MemWrapper
run_acc	MemWrapper.cpp	/^void MemWrapper::run_acc(const Config& configs, Memory<T, Controller>& memory) {$/;"	f	class:MemWrapper
sample	StatType.cpp	/^Histogram::sample(Counter val, int number)$/;"	f	class:Stats::Histogram
sample	StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats::AverageDeviation
sample	StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats::Distribution
sample	StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats::StandardDeviation
sample	Statistics.h	/^    void sample(const U &v, int n = 1) { StatBase<StatType>::stat.sample(v, n); }$/;"	f	class:ramulator::DistStatBase
samples	StatType.h	/^  Counter samples;$/;"	m	class:Stats::Distribution
samples	StatType.h	/^  Counter samples;$/;"	m	class:Stats::Histogram
samples	StatType.h	/^  Counter samples;$/;"	m	class:Stats::StandardDeviation
sc_main	Main.cpp	/^int sc_main(int argc, char *argv[]){$/;"	f
sc_trace	common.cpp	/^void sc_trace(sc_trace_file *tf, const BurstOp &op, const std::string &name){$/;"	f
schedule	SpeedyController.h	/^    void schedule(request_queue& q){$/;"	f	class:ramulator::SpeedyController
scheduler	Controller.h	/^    Scheduler<T>* scheduler;  \/\/ determines the highest priority request whose commands will be issued$/;"	m	class:ramulator::Controller
scope	ALDRAM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::ALDRAM
scope	DDR3.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::DDR3
scope	DDR4.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::DDR4
scope	DSARP.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::DSARP
scope	GDDR5.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::GDDR5
scope	HBM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::HBM
scope	LPDDR3.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::LPDDR3
scope	LPDDR4.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::LPDDR4
scope	SALP.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::SALP
scope	TLDRAM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::TLDRAM
scope	WideIO.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::WideIO
scope	WideIO2.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ramulator::WideIO2
segment_ratio	TLDRAM.h	/^    int segment_ratio = 16;$/;"	m	class:ramulator::TLDRAM
self	StatType.h	/^  Derived &self() {return *static_cast<Derived*>(this);}$/;"	f	class:Stats::Stat
self	Statistics.h	/^    DistributionStat & self() { return *this; }$/;"	f	class:ramulator::DistributionStat
self	Statistics.h	/^    HistogramStat & self() { return *this; }$/;"	f	class:ramulator::HistogramStat
self	Statistics.h	/^    StatBase<StatType> & self() { return *this; }$/;"	f	class:ramulator::StatBase
self	Statistics.h	/^    StatBaseVec<StatType> & self() { return *this; }$/;"	f	class:ramulator::StatBaseVec
self	Statistics.h	/^    VectorStatBase<StatType, Element> & self() { return *this; }$/;"	f	class:ramulator::VectorStatBase
selfptr	StatType.h	/^  Derived *selfptr() {return static_cast<Derived*>(this);}$/;"	f	class:Stats::Stat
send	Cache.cpp	/^bool Cache::send(Request req) {$/;"	f	class:ramulator::Cache
send	Gem5Wrapper.cpp	/^bool Gem5Wrapper::send(Request req)$/;"	f	class:Gem5Wrapper
send	Memory.h	/^    bool send(Request req)$/;"	f	class:ramulator::Memory
send	Processor.h	/^    function<bool(Request)> send;$/;"	m	class:ramulator::Core
sendBurstResp	MemWrapper.cpp	/^void MemWrapper::sendBurstResp(){$/;"	f	class:MemWrapper
sendMemReq	pe.cpp	/^void pe::sendMemReq(){ $/;"	f	class:pe
send_memory	Cache.h	/^  std::function<bool(Request)> send_memory;$/;"	m	class:ramulator::CacheSystem
separatorString	StatType.h	/^  std::string separatorString;$/;"	m	class:Stats::Stat
serving_requests	DRAM.h	/^    ScalarStat serving_requests;$/;"	m	class:ramulator::DRAM
set	StatType.h	/^  void set(Counter val) {$/;"	f	class:Stats::Average
setArriveMemTime	common.cpp	/^void BurstOp::setArriveMemTime(long arriveTime){$/;"	f	class:BurstOp
setArrivePeTime	common.cpp	/^void BurstOp::setArrivePeTime(long arriveTime){$/;"	f	class:BurstOp
setDepartMemTime	common.cpp	/^void BurstOp::setDepartMemTime(long departTime){$/;"	f	class:BurstOp
setDepartPeTime	common.cpp	/^void BurstOp::setDepartPeTime(long departTime){$/;"	f	class:BurstOp
setNewStartVertex	MemWrapper.cpp	/^void MemWrapper::setNewStartVertex(int idx){$/;"	f	class:MemWrapper
setPeClkCycle	pe.cpp	/^void pe::setPeClkCycle(int _peClkCycle){$/;"	f	class:pe
setSeparator	StatType.h	/^  Derived &setSeparator(std::string str) {$/;"	f	class:Stats::Stat
setSeparator	StatType.h	/^  const std::string& setSeparator() const {return separatorString;}$/;"	f	class:Stats::Stat
setSeparator	Statistics.h	/^    StatBase<StatType> & setSeparator(const std::string & _sep) {$/;"	f	class:ramulator::StatBase
setSeparator	Statistics.h	/^    const std::string &setSeparator() const { return stat.setSeparator(); }$/;"	f	class:ramulator::StatBase
set_channel_number	ALDRAM.cpp	/^void ALDRAM::set_channel_number(int channel) {$/;"	f	class:ALDRAM
set_channel_number	DDR3.cpp	/^void DDR3::set_channel_number(int channel) {$/;"	f	class:DDR3
set_channel_number	DDR4.cpp	/^void DDR4::set_channel_number(int channel) {$/;"	f	class:DDR4
set_channel_number	DSARP.cpp	/^void DSARP::set_channel_number(int channel) {$/;"	f	class:DSARP
set_channel_number	GDDR5.cpp	/^void GDDR5::set_channel_number(int channel) {$/;"	f	class:GDDR5
set_channel_number	HBM.cpp	/^void HBM::set_channel_number(int channel) {$/;"	f	class:HBM
set_channel_number	LPDDR3.cpp	/^void LPDDR3::set_channel_number(int channel) {$/;"	f	class:LPDDR3
set_channel_number	LPDDR4.cpp	/^void LPDDR4::set_channel_number(int channel) {$/;"	f	class:LPDDR4
set_channel_number	SALP.cpp	/^void SALP::set_channel_number(int channel) {$/;"	f	class:SALP
set_channel_number	TLDRAM.cpp	/^void TLDRAM::set_channel_number(int channel) {$/;"	f	class:TLDRAM
set_channel_number	WideIO.cpp	/^void WideIO::set_channel_number(int channel) {$/;"	f	class:WideIO
set_channel_number	WideIO2.cpp	/^void WideIO2::set_channel_number(int channel) {$/;"	f	class:WideIO2
set_core_num	Config.h	/^    void set_core_num(int _core_num) {core_num = _core_num;}$/;"	f	class:ramulator::Config
set_rank_number	ALDRAM.cpp	/^void ALDRAM::set_rank_number(int rank) {$/;"	f	class:ALDRAM
set_rank_number	DDR3.cpp	/^void DDR3::set_rank_number(int rank) {$/;"	f	class:DDR3
set_rank_number	DDR4.cpp	/^void DDR4::set_rank_number(int rank) {$/;"	f	class:DDR4
set_rank_number	DSARP.cpp	/^void DSARP::set_rank_number(int rank) {$/;"	f	class:DSARP
set_rank_number	GDDR5.cpp	/^void GDDR5::set_rank_number(int rank) {$/;"	f	class:GDDR5
set_rank_number	HBM.cpp	/^void HBM::set_rank_number(int rank) {$/;"	f	class:HBM
set_rank_number	LPDDR3.cpp	/^void LPDDR3::set_rank_number(int rank) {$/;"	f	class:LPDDR3
set_rank_number	LPDDR4.cpp	/^void LPDDR4::set_rank_number(int rank) {$/;"	f	class:LPDDR4
set_rank_number	SALP.cpp	/^void SALP::set_rank_number(int rank) {$/;"	f	class:SALP
set_rank_number	TLDRAM.cpp	/^void TLDRAM::set_rank_number(int rank) {$/;"	f	class:TLDRAM
set_rank_number	WideIO.cpp	/^void WideIO::set_rank_number(int rank) {$/;"	f	class:WideIO
set_rank_number	WideIO2.cpp	/^void WideIO2::set_rank_number(int rank) {$/;"	f	class:WideIO2
set_ready	Processor.cpp	/^void Window::set_ready(long addr, int mask)$/;"	f	class:Window
shallowReqCopy	MemWrapper.cpp	/^void MemWrapper::shallowReqCopy(const Request &simpleReq, Request &req){$/;"	f	class:MemWrapper
sibling	ALDRAM.h	/^        bool sibling;$/;"	m	struct:ramulator::ALDRAM::TimingEntry
sibling	DDR3.h	/^        bool sibling;$/;"	m	struct:ramulator::DDR3::TimingEntry
sibling	DDR4.h	/^        bool sibling;$/;"	m	struct:ramulator::DDR4::TimingEntry
sibling	DSARP.h	/^        bool sibling;$/;"	m	struct:ramulator::DSARP::TimingEntry
sibling	GDDR5.h	/^        bool sibling;$/;"	m	struct:ramulator::GDDR5::TimingEntry
sibling	HBM.h	/^        bool sibling;$/;"	m	struct:ramulator::HBM::TimingEntry
sibling	LPDDR3.h	/^        bool sibling;$/;"	m	struct:ramulator::LPDDR3::TimingEntry
sibling	LPDDR4.h	/^        bool sibling;$/;"	m	struct:ramulator::LPDDR4::TimingEntry
sibling	SALP.h	/^        bool sibling;$/;"	m	struct:ramulator::SALP::TimingEntry
sibling	TLDRAM.h	/^        bool sibling;$/;"	m	struct:ramulator::TLDRAM::TimingEntry
sibling	WideIO.h	/^        bool sibling;$/;"	m	struct:ramulator::WideIO::TimingEntry
sibling	WideIO2.h	/^        bool sibling;$/;"	m	struct:ramulator::WideIO2::TimingEntry
size	ALDRAM.h	/^        int size;$/;"	m	struct:ramulator::ALDRAM::OrgEntry
size	Cache.h	/^  size_t size;$/;"	m	class:ramulator::Cache
size	Controller.h	/^        unsigned int size() {return q.size();}$/;"	f	struct:ramulator::Controller::Queue
size	DDR3.h	/^        int size;$/;"	m	struct:ramulator::DDR3::OrgEntry
size	DDR4.h	/^        int size;$/;"	m	struct:ramulator::DDR4::OrgEntry
size	DRAM.h	/^    long size;$/;"	m	class:ramulator::DRAM
size	DSARP.h	/^        int size;$/;"	m	struct:ramulator::DSARP::OrgEntry
size	GDDR5.h	/^        int size;$/;"	m	struct:ramulator::GDDR5::OrgEntry
size	HBM.h	/^        int size;$/;"	m	struct:ramulator::HBM::OrgEntry
size	LPDDR3.h	/^        int size;$/;"	m	struct:ramulator::LPDDR3::OrgEntry
size	LPDDR4.h	/^        int size;$/;"	m	struct:ramulator::LPDDR4::OrgEntry
size	SALP.h	/^        int size;$/;"	m	struct:ramulator::SALP::OrgEntry
size	StatType.h	/^  size_type size() const { return 0; }$/;"	f	class:Stats::Stat
size	StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats::AverageDeviation
size	StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats::ScalarBase
size	StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats::StandardDeviation
size	StatType.h	/^  size_type size() const {return _size;}$/;"	f	class:Stats::VectorBase
size	StatType.h	/^  size_type size() const {return cvec.size();}$/;"	f	class:Stats::Distribution
size	StatType.h	/^  size_type size() const {return param_buckets;}$/;"	f	class:Stats::Histogram
size	Statistics.h	/^    Stats::size_type size(void) const { return stat.size(); }$/;"	f	class:ramulator::StatBase
size	TLDRAM.h	/^        int size;$/;"	m	struct:ramulator::TLDRAM::OrgEntry
size	WideIO.h	/^        int size;$/;"	m	struct:ramulator::WideIO::OrgEntry
size	WideIO2.h	/^        int size; \/\/ per-channel density$/;"	m	struct:ramulator::WideIO2::OrgEntry
size_type	StatType.h	/^typedef unsigned int size_type;$/;"	t	namespace:Stats
slice_lower_bits	Memory.h	/^    int slice_lower_bits(long& addr, int bits)$/;"	f	class:ramulator::Memory
spec	DRAM.h	/^    T* spec;$/;"	m	class:ramulator::DRAM
spec	Memory.h	/^    T * spec;$/;"	m	class:ramulator::Memory
speed_entry	ALDRAM.h	/^    }, speed_entry;$/;"	m	class:ramulator::ALDRAM	typeref:struct:ramulator::ALDRAM::SpeedEntry
speed_entry	DDR3.h	/^    }, speed_entry;$/;"	m	class:ramulator::DDR3	typeref:struct:ramulator::DDR3::SpeedEntry
speed_entry	DDR4.h	/^    }, speed_entry;$/;"	m	class:ramulator::DDR4	typeref:struct:ramulator::DDR4::SpeedEntry
speed_entry	DSARP.h	/^    }, speed_entry;$/;"	m	class:ramulator::DSARP	typeref:struct:ramulator::DSARP::SpeedEntry
speed_entry	GDDR5.h	/^    }, speed_entry;$/;"	m	class:ramulator::GDDR5	typeref:struct:ramulator::GDDR5::SpeedEntry
speed_entry	HBM.h	/^    }, speed_entry;$/;"	m	class:ramulator::HBM	typeref:struct:ramulator::HBM::SpeedEntry
speed_entry	LPDDR3.h	/^    }, speed_entry;$/;"	m	class:ramulator::LPDDR3	typeref:struct:ramulator::LPDDR3::SpeedEntry
speed_entry	LPDDR4.h	/^    }, speed_entry;$/;"	m	class:ramulator::LPDDR4	typeref:struct:ramulator::LPDDR4::SpeedEntry
speed_entry	SALP.h	/^    }, speed_entry;$/;"	m	class:ramulator::SALP	typeref:struct:ramulator::SALP::SpeedEntry
speed_entry	TLDRAM.h	/^    }, speed_entry;$/;"	m	class:ramulator::TLDRAM	typeref:struct:ramulator::TLDRAM::SpeedEntry
speed_entry	WideIO.h	/^    }, speed_entry;$/;"	m	class:ramulator::WideIO	typeref:struct:ramulator::WideIO::SpeedEntry
speed_entry	WideIO2.h	/^    }, speed_entry;$/;"	m	class:ramulator::WideIO2	typeref:struct:ramulator::WideIO2::SpeedEntry
speed_map	ALDRAM.cpp	/^map<string, enum ALDRAM::Speed> ALDRAM::speed_map = {$/;"	m	class:ALDRAM	file:
speed_map	ALDRAM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::ALDRAM
speed_map	DDR3.cpp	/^map<string, enum DDR3::Speed> DDR3::speed_map = {$/;"	m	class:DDR3	file:
speed_map	DDR3.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::DDR3
speed_map	DDR4.cpp	/^map<string, enum DDR4::Speed> DDR4::speed_map = {$/;"	m	class:DDR4	file:
speed_map	DDR4.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::DDR4
speed_map	DSARP.cpp	/^map<string, enum DSARP::Speed> DSARP::speed_map = {$/;"	m	class:DSARP	file:
speed_map	DSARP.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::DSARP
speed_map	GDDR5.cpp	/^map<string, enum GDDR5::Speed> GDDR5::speed_map = {$/;"	m	class:GDDR5	file:
speed_map	GDDR5.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::GDDR5
speed_map	HBM.cpp	/^map<string, enum HBM::Speed> HBM::speed_map = {$/;"	m	class:HBM	file:
speed_map	HBM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::HBM
speed_map	LPDDR3.cpp	/^map<string, enum LPDDR3::Speed> LPDDR3::speed_map = {$/;"	m	class:LPDDR3	file:
speed_map	LPDDR3.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::LPDDR3
speed_map	LPDDR4.cpp	/^map<string, enum LPDDR4::Speed> LPDDR4::speed_map = {$/;"	m	class:LPDDR4	file:
speed_map	LPDDR4.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::LPDDR4
speed_map	SALP.cpp	/^map<string, enum SALP::Speed> SALP::speed_map = {$/;"	m	class:SALP	file:
speed_map	SALP.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::SALP
speed_map	TLDRAM.cpp	/^map<string, enum TLDRAM::Speed> TLDRAM::speed_map = {$/;"	m	class:TLDRAM	file:
speed_map	TLDRAM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::TLDRAM
speed_map	WideIO.cpp	/^map<string, enum WideIO::Speed> WideIO::speed_map = {$/;"	m	class:WideIO	file:
speed_map	WideIO.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::WideIO
speed_map	WideIO2.cpp	/^map<string, enum WideIO2::Speed> WideIO2::speed_map = {$/;"	m	class:WideIO2	file:
speed_map	WideIO2.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ramulator::WideIO2
speed_table	ALDRAM.h	/^    } speed_table[int(Temp::MAX)][int(Speed::MAX)] = {$/;"	m	class:ramulator::ALDRAM	typeref:struct:ramulator::ALDRAM::SpeedEntry
speed_table	DDR3.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::DDR3	typeref:struct:ramulator::DDR3::SpeedEntry
speed_table	DDR4.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::DDR4	typeref:struct:ramulator::DDR4::SpeedEntry
speed_table	DSARP.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::DSARP	typeref:struct:ramulator::DSARP::SpeedEntry
speed_table	GDDR5.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::GDDR5	typeref:struct:ramulator::GDDR5::SpeedEntry
speed_table	HBM.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::HBM	typeref:struct:ramulator::HBM::SpeedEntry
speed_table	LPDDR3.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::LPDDR3	typeref:struct:ramulator::LPDDR3::SpeedEntry
speed_table	LPDDR4.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::LPDDR4	typeref:struct:ramulator::LPDDR4::SpeedEntry
speed_table	SALP.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::SALP	typeref:struct:ramulator::SALP::SpeedEntry
speed_table	TLDRAM.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::TLDRAM	typeref:struct:ramulator::TLDRAM::SpeedEntry
speed_table	WideIO.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::WideIO	typeref:struct:ramulator::WideIO::SpeedEntry
speed_table	WideIO2.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:ramulator::WideIO2	typeref:struct:ramulator::WideIO2::SpeedEntry
squares	StatType.h	/^  Counter squares;$/;"	m	class:Stats::AverageDeviation
squares	StatType.h	/^  Counter squares;$/;"	m	class:Stats::Distribution
squares	StatType.h	/^  Counter squares;$/;"	m	class:Stats::Histogram
squares	StatType.h	/^  Counter squares;$/;"	m	class:Stats::StandardDeviation
standard	MemWrapper.h	/^        std::string standard;$/;"	m	class:MemWrapper
standard_name	ALDRAM.h	/^    static string standard_name;$/;"	m	class:ramulator::ALDRAM
standard_name	DDR3.h	/^    static string standard_name;$/;"	m	class:ramulator::DDR3
standard_name	DDR4.h	/^    static string standard_name;$/;"	m	class:ramulator::DDR4
standard_name	DSARP.h	/^    static string standard_name;$/;"	m	class:ramulator::DSARP
standard_name	GDDR5.h	/^    static string standard_name;$/;"	m	class:ramulator::GDDR5
standard_name	HBM.h	/^    static string standard_name;$/;"	m	class:ramulator::HBM
standard_name	LPDDR3.h	/^    static string standard_name;$/;"	m	class:ramulator::LPDDR3
standard_name	LPDDR4.h	/^    static string standard_name;$/;"	m	class:ramulator::LPDDR4
standard_name	SALP.h	/^    string standard_name;$/;"	m	class:ramulator::SALP
standard_name	TLDRAM.h	/^    static string standard_name;$/;"	m	class:ramulator::TLDRAM
standard_name	WideIO.h	/^    static string standard_name;$/;"	m	class:ramulator::WideIO
standard_name	WideIO2.h	/^    static string standard_name;$/;"	m	class:ramulator::WideIO2
start	ALDRAM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::ALDRAM	typeref:class:ramulator::ALDRAM::State
start	DDR3.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::DDR3	typeref:class:ramulator::DDR3::State
start	DDR4.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::DDR4	typeref:class:ramulator::DDR4::State
start	DSARP.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::DSARP	typeref:class:ramulator::DSARP::State
start	GDDR5.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::GDDR5	typeref:class:ramulator::GDDR5::State
start	HBM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::HBM	typeref:class:ramulator::HBM::State
start	LPDDR3.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::LPDDR3	typeref:class:ramulator::LPDDR3::State
start	LPDDR4.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::LPDDR4	typeref:class:ramulator::LPDDR4::State
start	SALP.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::SALP	typeref:class:ramulator::SALP::State
start	TLDRAM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::TLDRAM	typeref:class:ramulator::TLDRAM::State
start	WideIO.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::WideIO	typeref:class:ramulator::WideIO::State
start	WideIO2.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ramulator::WideIO2	typeref:class:ramulator::WideIO2::State
startNum	common.cpp	/^int GL::startNum = 10;$/;"	m	class:GL	file:
startNum	common.h	/^        static int startNum;$/;"	m	class:GL
start_run	MemWrapper.cpp	/^void MemWrapper::start_run(const Config& configs, T* spec, const vector<const char*>& files) {$/;"	f	class:MemWrapper
startingVertices	common.cpp	/^std::vector<int> GL::startingVertices;$/;"	m	class:GL	file:
startingVertices	common.h	/^        static std::vector<int> startingVertices;$/;"	m	class:GL
stat	Statistics.h	/^    StatType stat;$/;"	m	class:ramulator::StatBase
statName	Statistics.h	/^    std::string statName;$/;"	m	class:ramulator::StatBase
stat_output	StatType.h	/^  std::ofstream stat_output;$/;"	m	class:Stats::StatList
state	DRAM.h	/^    typename T::State state;$/;"	m	class:ramulator::DRAM
statlist	StatType.cpp	/^StatList statlist;$/;"	m	namespace:Stats	file:
stats_out	MemWrapper.h	/^        string stats_out;$/;"	m	class:MemWrapper
statusMonitor	MemWrapper.cpp	/^void MemWrapper::statusMonitor(){$/;"	f	class:MemWrapper
subarray_ref_counters	Refresh.h	/^  vector<vector<int>> subarray_ref_counters;$/;"	m	class:ramulator::Refresh
subarrays	Config.h	/^    int subarrays;$/;"	m	class:ramulator::Config
subdesc	Statistics.h	/^    StatBaseVec<StatType> & subdesc(Stats::off_type index, const std::string & desc) {$/;"	f	class:ramulator::StatBaseVec
subname	Statistics.h	/^    StatBaseVec<StatType> & subname(Stats::off_type index, const std::string & name) {$/;"	f	class:ramulator::StatBaseVec
sum	StatType.h	/^  Counter sum;$/;"	m	class:Stats::AverageDeviation
sum	StatType.h	/^  Counter sum;$/;"	m	class:Stats::Distribution
sum	StatType.h	/^  Counter sum;$/;"	m	class:Stats::Histogram
sum	StatType.h	/^  Counter sum;$/;"	m	class:Stats::StandardDeviation
tCK	ALDRAM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::ALDRAM::SpeedEntry
tCK	DDR3.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DDR3::SpeedEntry
tCK	DDR4.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DDR4::SpeedEntry
tCK	DSARP.h	/^        double freq, tCK;$/;"	m	struct:ramulator::DSARP::SpeedEntry
tCK	GDDR5.h	/^        double freq, tCK;$/;"	m	struct:ramulator::GDDR5::SpeedEntry
tCK	Gem5Wrapper.h	/^    double tCK;$/;"	m	class:ramulator::Gem5Wrapper
tCK	HBM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::HBM::SpeedEntry
tCK	LPDDR3.h	/^        double freq, tCK;$/;"	m	struct:ramulator::LPDDR3::SpeedEntry
tCK	LPDDR4.h	/^        double freq, tCK;$/;"	m	struct:ramulator::LPDDR4::SpeedEntry
tCK	SALP.h	/^        double freq, tCK;$/;"	m	struct:ramulator::SALP::SpeedEntry
tCK	TLDRAM.h	/^        double freq, tCK;$/;"	m	struct:ramulator::TLDRAM::SpeedEntry
tCK	WideIO.h	/^        double freq, tCK;$/;"	m	struct:ramulator::WideIO::SpeedEntry
tCK	WideIO2.h	/^        double freq, tCK;$/;"	m	struct:ramulator::WideIO2::SpeedEntry
table	Scheduler.h	/^    map<vector<int>, Entry> table;$/;"	m	class:ramulator::RowTable
tag	Cache.h	/^    long tag;$/;"	m	struct:ramulator::Cache::Line
tag_offset	Cache.h	/^  unsigned int tag_offset;$/;"	m	class:ramulator::Cache
tail	Processor.h	/^    int tail = 0;$/;"	m	class:ramulator::Window
temperature	ALDRAM.h	/^    Temp temperature = Temp::HOT;  \/\/ DHL$/;"	m	class:ramulator::ALDRAM
tick	Cache.cpp	/^void CacheSystem::tick() {$/;"	f	class:ramulator::CacheSystem
tick	Controller.cpp	/^void Controller<TLDRAM>::tick(){$/;"	f	class:ramulator::Controller
tick	Controller.h	/^    void tick()$/;"	f	class:ramulator::Controller
tick	Gem5Wrapper.cpp	/^void Gem5Wrapper::tick()$/;"	f	class:Gem5Wrapper
tick	Memory.h	/^    void tick()$/;"	f	class:ramulator::Memory
tick	Processor.cpp	/^void Core::tick()$/;"	f	class:Core
tick	Processor.cpp	/^void Processor::tick() {$/;"	f	class:Processor
tick	SpeedyController.h	/^    void tick()$/;"	f	class:ramulator::SpeedyController
tick_ref	Refresh.cpp	/^void Refresh<DSARP>::tick_ref() {$/;"	f	class:ramulator::Refresh
tick_ref	Refresh.h	/^  void tick_ref() {$/;"	f	class:ramulator::Refresh
timeout	Scheduler.h	/^    int timeout = 50;$/;"	m	class:ramulator::RowPolicy
timestamp	Scheduler.h	/^        long timestamp;$/;"	m	struct:ramulator::RowTable::Entry
timing	ALDRAM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::ALDRAM
timing	DDR3.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR3
timing	DDR4.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DDR4
timing	DRAM.h	/^    vector<typename T::TimingEntry>* timing;$/;"	m	class:ramulator::DRAM
timing	DSARP.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::DSARP
timing	GDDR5.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::GDDR5
timing	HBM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::HBM
timing	LPDDR3.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR3
timing	LPDDR4.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::LPDDR4
timing	SALP.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::SALP
timing	TLDRAM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::TLDRAM
timing	WideIO.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO
timing	WideIO2.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ramulator::WideIO2
total	StatType.h	/^  Result total() const {$/;"	f	class:Stats::VectorBase
total	StatType.h	/^  Result total() const {return (Result)_value;}$/;"	f	class:Stats::Scalar
total	StatType.h	/^  Result total() const {return result();}$/;"	f	class:Stats::Average
total	StatType.h	/^  Result total() const {return result();}$/;"	f	class:Stats::ConstValue
total	StatType.h	/^  virtual Result total() const { return Result(); };$/;"	f	class:Stats::StatBase
total	StatType.h	/^const uint16_t total     = 0x00000010;$/;"	m	namespace:Stats
total	Statistics.h	/^    Stats::Result total(void) const { return StatBase<StatType>::stat.total(); }$/;"	f	class:ramulator::VectorStatBase
total_val	StatType.h	/^  Result total_val;$/;"	m	class:Stats::Average
trace	Processor.h	/^    Trace trace;$/;"	m	class:ramulator::Core
trace_name	Processor.h	/^    std::string trace_name;$/;"	m	class:ramulator::Trace
translate	ALDRAM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::ALDRAM
translate	DDR3.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::DDR3
translate	DDR4.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::DDR4
translate	DSARP.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::DSARP
translate	GDDR5.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::GDDR5
translate	HBM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::HBM
translate	LPDDR3.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::LPDDR3
translate	LPDDR4.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::LPDDR4
translate	SALP.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::SALP
translate	TLDRAM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::TLDRAM
translate	WideIO.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::WideIO
translate	WideIO2.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ramulator::WideIO2
translation	Memory.h	/^    } translation = Translation::None;$/;"	m	class:ramulator::Memory	typeref:class:ramulator::Memory::Translation
tx_bits	Memory.h	/^    int tx_bits;$/;"	m	class:ramulator::Memory
type	DSARP.h	/^    } type;$/;"	m	class:ramulator::DSARP	typeref:class:ramulator::DSARP::Type
type	Memory.h	/^    } type = Type::RoBaRaCoCh;$/;"	m	class:ramulator::Memory	typeref:class:ramulator::Memory::Type
type	Request.h	/^            } type;$/;"	m	class:ramulator::Request	typeref:class:ramulator::Request::Type
type	SALP.h	/^    } type;$/;"	m	class:ramulator::SALP	typeref:class:ramulator::SALP::Type
type	Scheduler.h	/^    } type = Type::FRFCFS_PriorHit;$/;"	m	class:ramulator::Scheduler	typeref:class:ramulator::Scheduler::Type
type	Scheduler.h	/^    } type = Type::Opened;$/;"	m	class:ramulator::RowPolicy	typeref:class:ramulator::RowPolicy::Type
type	common.h	/^        ramulator::Request::Type type;$/;"	m	struct:BurstOp
type_map	SALP.cpp	/^map<string, enum SALP::Type> SALP::type_map = {$/;"	m	class:SALP	file:
type_map	SALP.h	/^    static map<string, enum Type> type_map;$/;"	m	class:ramulator::SALP
udf	Request.h	/^            UDF udf;$/;"	m	class:ramulator::Request
underflow	StatType.h	/^  Counter underflow;$/;"	m	class:Stats::Distribution
update	DRAM.h	/^void DRAM<T>::update(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:ramulator::DRAM
update	Scheduler.h	/^    void update(typename T::Command cmd, const vector<int>& addr_vec, long clk)$/;"	f	class:ramulator::RowTable
update	SpeedyController.h	/^    void update(typename T::Command cmd, bool state_change, vector<int>::iterator& begin, vector<int>::iterator& end, request_queue& q){$/;"	f	class:ramulator::SpeedyController
updateAddrVec	common.cpp	/^void BurstOp::updateAddrVec() {$/;"	f	class:BurstOp
updateBurstToRam	MemWrapper.cpp	/^void MemWrapper::updateBurstToRam(long watchedBurstIdx){$/;"	f	class:MemWrapper
updateReqVec	common.cpp	/^void BurstOp::updateReqVec() {$/;"	f	class:BurstOp
updateSingleDataToRam	MemWrapper.h	/^        void updateSingleDataToRam(long addr, T t){$/;"	f	class:MemWrapper
updateWriteResp	MemWrapper.cpp	/^bool MemWrapper::updateWriteResp(){$/;"	f	class:MemWrapper
update_serving_requests	DRAM.h	/^void DRAM<T>::update_serving_requests(const int* addr, int delta, long clk) {$/;"	f	class:ramulator::DRAM
update_state	DRAM.h	/^void DRAM<T>::update_state(typename T::Command cmd, const int* addr)$/;"	f	class:ramulator::DRAM
update_temp	Controller.cpp	/^void Controller<ALDRAM>::update_temp(ALDRAM::Temp current_temperature){$/;"	f	class:ramulator::Controller
update_temp	Controller.h	/^    void update_temp(ALDRAM::Temp current_temperature)$/;"	f	class:ramulator::Controller
update_timing	DRAM.h	/^void DRAM<T>::update_timing(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:ramulator::DRAM
val	ALDRAM.h	/^        int val;$/;"	m	struct:ramulator::ALDRAM::TimingEntry
val	DDR3.h	/^        int val;$/;"	m	struct:ramulator::DDR3::TimingEntry
val	DDR4.h	/^        int val;$/;"	m	struct:ramulator::DDR4::TimingEntry
val	DSARP.h	/^        int val;$/;"	m	struct:ramulator::DSARP::TimingEntry
val	GDDR5.h	/^        int val;$/;"	m	struct:ramulator::GDDR5::TimingEntry
val	HBM.h	/^        int val;$/;"	m	struct:ramulator::HBM::TimingEntry
val	LPDDR3.h	/^        int val;$/;"	m	struct:ramulator::LPDDR3::TimingEntry
val	LPDDR4.h	/^        int val;$/;"	m	struct:ramulator::LPDDR4::TimingEntry
val	SALP.h	/^        int val;$/;"	m	struct:ramulator::SALP::TimingEntry
val	TLDRAM.h	/^        int val;$/;"	m	struct:ramulator::TLDRAM::TimingEntry
val	WideIO.h	/^        int val;$/;"	m	struct:ramulator::WideIO::TimingEntry
val	WideIO2.h	/^        int val;$/;"	m	struct:ramulator::WideIO2::TimingEntry
valid	common.h	/^        bool valid;$/;"	m	struct:BurstOp
validate	MemoryFactory.cpp	/^void MemoryFactory<HBM>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:ramulator::MemoryFactory
validate	MemoryFactory.cpp	/^void MemoryFactory<LPDDR4>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:ramulator::MemoryFactory
validate	MemoryFactory.cpp	/^void MemoryFactory<WideIO2>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:ramulator::MemoryFactory
validate	MemoryFactory.cpp	/^void MemoryFactory<WideIO>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:ramulator::MemoryFactory
validate	MemoryFactory.h	/^    static void validate(int channels, int ranks, const Config& configs) {$/;"	f	class:ramulator::MemoryFactory
value	StatType.h	/^  Counter value() const { return current; }$/;"	f	class:Stats::Average
value	StatType.h	/^  Counter value() const {return _value;}$/;"	f	class:Stats::ConstValue
value	StatType.h	/^  Counter value() const {return _value;}$/;"	f	class:Stats::Scalar
value	StatType.h	/^  void value(VCounter& vec) const {$/;"	f	class:Stats::VectorBase
value	Statistics.h	/^    Stats::Counter value() const { return StatBase<StatType>::stat.value(); };$/;"	f	class:ramulator::ScalarStatBase
value	Statistics.h	/^    void value(Stats::VCounter & vec) const { StatBase<StatType>::stat.value(vec); }$/;"	f	class:ramulator::VectorStatBase
vertexNum	common.cpp	/^int GL::vertexNum = 0;$/;"	m	class:GL	file:
vertexNum	common.h	/^        static int vertexNum;$/;"	m	class:GL
vertex_num	graph.h	/^        int vertex_num;$/;"	m	class:Graph
vertices	graph.h	/^        std::vector<Vertex*> vertices; $/;"	m	class:Graph
vresult	StatType.h	/^  VResult vresult() const {$/;"	f	class:Stats::VectorBase
vresult	StatType.h	/^  VResult vresult() const {return VResult(1, result());}$/;"	f	class:Stats::ScalarBase
vresult	StatType.h	/^  virtual VResult vresult() const { return VResult(); };$/;"	f	class:Stats::StatBase
wait_list	Cache.h	/^  std::list<std::pair<long, Request> > wait_list;$/;"	m	class:ramulator::CacheSystem
window	Processor.h	/^    Window window;$/;"	m	class:ramulator::Core
write_hi	SpeedyController.h	/^    double write_hi = 0.875;$/;"	m	class:ramulator::SpeedyController
write_low	SpeedyController.h	/^    double write_low = 0.5;$/;"	m	class:ramulator::SpeedyController
write_mode	Controller.h	/^    bool write_mode = false;  \/\/ whether write requests should be prioritized over reads$/;"	m	class:ramulator::Controller
write_mode	SpeedyController.h	/^    bool write_mode = false;  \/\/ whether write requests should be prioritized over reads$/;"	m	class:ramulator::SpeedyController
write_req_queue_length_avg	Controller.h	/^    ScalarStat write_req_queue_length_avg;$/;"	m	class:ramulator::Controller
write_req_queue_length_sum	Controller.h	/^    ScalarStat write_req_queue_length_sum;$/;"	m	class:ramulator::Controller
write_row_conflicts	Controller.h	/^    VectorStat write_row_conflicts;$/;"	m	class:ramulator::Controller
write_row_hits	Controller.h	/^    VectorStat write_row_hits;$/;"	m	class:ramulator::Controller
write_row_misses	Controller.h	/^    VectorStat write_row_misses;$/;"	m	class:ramulator::Controller
write_transaction_bytes	Controller.h	/^    ScalarStat write_transaction_bytes;$/;"	m	class:ramulator::Controller
writebackHistory	MemWrapper.h	/^        std::map<long, bool> writebackHistory;$/;"	m	class:MemWrapper
writeq	Controller.h	/^    Queue writeq;  \/\/ queue for write requests$/;"	m	class:ramulator::Controller
writeq	SpeedyController.h	/^    request_queue writeq;  \/\/ queue for write requests$/;"	m	class:ramulator::SpeedyController
wrp	Refresh.cpp	/^void Refresh<DSARP>::wrp() {$/;"	f	class:ramulator::Refresh
wrq_comp	Refresh.cpp	/^bool wrq_comp (wrq_idx l, wrq_idx r)$/;"	f	namespace:ramulator
wrq_idx	Refresh.cpp	/^typedef pair<int, int> wrq_idx;$/;"	t	namespace:ramulator	file:
zero	StatType.h	/^  bool zero() const { return (fabs(total_val) < eps); }$/;"	f	class:Stats::Average
zero	StatType.h	/^  bool zero() const {$/;"	f	class:Stats::Distribution
zero	StatType.h	/^  bool zero() const {$/;"	f	class:Stats::Histogram
zero	StatType.h	/^  bool zero() const {$/;"	f	class:Stats::VectorBase
zero	StatType.h	/^  bool zero() const {return (fabs(_value) < eps);}$/;"	f	class:Stats::ConstValue
zero	StatType.h	/^  bool zero() const {return (fabs(samples) < eps);}$/;"	f	class:Stats::StandardDeviation
zero	StatType.h	/^  bool zero() const {return (fabs(sum) < eps);}$/;"	f	class:Stats::AverageDeviation
zero	StatType.h	/^  virtual bool zero() const {return (fabs(_value) < eps);}$/;"	f	class:Stats::Scalar
zero	Statistics.h	/^    bool zero(void) const { return stat.zero(); }$/;"	f	class:ramulator::StatBase
~Controller	Controller.h	/^    ~Controller(){$/;"	f	class:ramulator::Controller
~DRAM	DRAM.h	/^DRAM<T>::~DRAM()$/;"	f	class:ramulator::DRAM
~Gem5Wrapper	Gem5Wrapper.cpp	/^Gem5Wrapper::~Gem5Wrapper() {$/;"	f	class:Gem5Wrapper
~MemWrapper	MemWrapper.h	/^        ~MemWrapper(){};$/;"	f	class:MemWrapper
~Memory	Memory.h	/^    ~Memory()$/;"	f	class:ramulator::Memory
~MemoryBase	Memory.h	/^    virtual ~MemoryBase() {}$/;"	f	class:ramulator::MemoryBase
~Refresh	Refresh.h	/^  virtual ~Refresh() {$/;"	f	class:ramulator::Refresh
~SpeedyController	SpeedyController.h	/^    ~SpeedyController(){$/;"	f	class:ramulator::SpeedyController
~StatList	StatType.h	/^  ~StatList() {$/;"	f	class:Stats::StatList
~Vertex	graph.h	/^        ~Vertex(){$/;"	f	class:Vertex
~pe	pe.h	/^        ~pe(){};$/;"	f	class:pe
